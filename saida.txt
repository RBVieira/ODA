E:\Usuários\RBV\Downloads\C#\TMFORUM\ODA\Tmf632.PartyManagement.Api\Program.cs
using Microsoft.EntityFrameworkCore;
using Tmf632.PartyManagement.Api.Data;
using Tmf632.PartyManagement.Api.Mappings;



//TESTE

var builder = WebApplication.CreateBuilder(args);

// Add services to the container.

builder.Services.AddControllers();
// Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle
builder.Services.AddEndpointsApiExplorer();
builder.Services.AddSwaggerGen();


//Meus servi�os
// Servi�o de conex�o ao banco de dados Microsoft SQL.
var connectionString = builder.Configuration.GetConnectionString("DefaultConnection");
builder.Services.AddDbContext<PartyManagementDbContext>(options => options.UseSqlServer(connectionString));

// Aqui registra o AutoMapper, indicando a classe MappingProfile
builder.Services.AddAutoMapper(cfg => cfg.AddProfile<MappingProfile>());

var app = builder.Build();

// Configure the HTTP request pipeline.
if (app.Environment.IsDevelopment())
{
    app.UseSwagger();
    app.UseSwaggerUI();
}

app.UseHttpsRedirection();

app.UseAuthorization();

app.MapControllers();

app.Run();


E:\Usuários\RBV\Downloads\C#\TMFORUM\ODA\Tmf683.PartyInteraction.Api\Program.cs
using Microsoft.EntityFrameworkCore;
using System.Net.Http.Headers;
using Tmf683.PartyInteraction.Infrastructure.Data;
using Tmf683.PartyInteraction.Application.Mappings;
using Tmf683.PartyInteraction.Application.Models.APIs;
using Tmf683.PartyInteraction.Application.Services.Interfaces;
using Tmf683.PartyInteraction.Application.Services;
using Tmf683.PartyInteraction.Application;
using Tmf683.PartyInteraction.Infrastructure;


var builder = WebApplication.CreateBuilder(args);

// Add services to the container.

builder.Services.AddControllers();
// Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle
builder.Services.AddEndpointsApiExplorer();
builder.Services.AddSwaggerGen();


// --- CONFIGURA��O CORRETA DO DBCONTEXT ---
builder.Services.AddDbContext<PartyInteractionDbContext>(options =>
    options.UseSqlServer(
        builder.Configuration.GetConnectionString("DefaultConnection"),
        b => b.MigrationsAssembly("Tmf683.PartyInteraction.Infrastructure")
    )
);



// Servi�o de conex�o ao banco de dados Microsoft SQL.
var connectionString = builder.Configuration.GetConnectionString("DefaultConnection");
builder.Services.AddDbContext<PartyInteractionDbContext>(options => options.UseSqlServer(connectionString));


// Mapeia a configura��o do appsettings.json para a classe que configura os dados da API TMF632
builder.Services.Configure<Tmf632ApiConfiguration>(builder.Configuration.GetSection("ApiClients:Tmf632"));

// Adicionar o HttpClient para fazer chamadas HTTP para a API TMF632 por exemplo
// Adicionar o HttpClient
builder.Services.AddHttpClient("PartyManagementClient", client =>
{
    client.DefaultRequestHeaders.Accept.Clear();
    client.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));
});

// --- INJE��O DE DEPEND�NCIA ---
builder.Services.AddScoped<IUnitOfWork, UnitOfWork>();
builder.Services.AddScoped<IPartyInteractionService, PartyInteractionService>();

// Adicionar o AutoMapper
builder.Services.AddAutoMapper(cfg => cfg.AddProfile<AutoMapperProfile>());

var app = builder.Build();

// Configure the HTTP request pipeline.
if (app.Environment.IsDevelopment())
{
    app.UseSwagger();
    app.UseSwaggerUI();
}

app.UseHttpsRedirection();

app.UseAuthorization();

app.MapControllers();

app.Run();


E:\Usuários\RBV\Downloads\C#\TMFORUM\ODA\Tmf683.PartyInteraction.Infrastructure\UnitOfWork.cs
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Tmf683.PartyInteraction.Infrastructure
{
    internal class UnitOfWork
    {
    }
}


E:\Usuários\RBV\Downloads\C#\TMFORUM\ODA\Tmf632.PartyManagement.Api\Controllers\PartyManagementController.cs
using AutoMapper;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Tmf632.PartyManagement.Api.Data;
using Tmf632.PartyManagement.Api.Models;
using Tmf632.PartyManagement.Api.Models.Dtos;

namespace Tmf632.PartyManagement.Api.Controllers
{
    [ApiController]
    [Route("api/tmf632/partyManagement")]
    public class PartyManagementController : ControllerBase
    {
        private readonly PartyManagementDbContext _context;
        private readonly IMapper _mapper;

        public PartyManagementController(PartyManagementDbContext context, IMapper mapper)
        {
            _context = context;
            _mapper = mapper;
        }

        // GET: api/tmf632/partyManagement/individual
        [HttpGet("individual")]
        public async Task<ActionResult<IEnumerable<IndividualDto>>> GetIndividuals()
        {
            var individuals = await _context.Individuals.ToListAsync();
            IEnumerable<IndividualDto> individualDto = _mapper.Map<IEnumerable<IndividualDto>>(individuals);
            return Ok(individualDto);
        }

        // GET: api/tmf632/partyManagement/individual/{id}
        [HttpGet("individual/{id}")]
        public async Task<ActionResult<IndividualDto>> GetIndividual(string id)
        {
            var individual = await _context.Individuals.FindAsync(id);

            if (individual == null)
            {
                return NotFound();
            }

            return _mapper.Map<IndividualDto>(individual);
        }

        // POST: api/tmf632/partyManagement/individual
        [HttpPost("individual")]
        public async Task<ActionResult<IndividualDto>> PostIndividual(IndividualDto individualDto)
        {
            var individual = _mapper.Map<Individual>(individualDto);

            // Garantir que um novo ID seja gerado para a nova organização
            individual.Id = Guid.NewGuid().ToString();

            _context.Individuals.Add(individual);
            await _context.SaveChangesAsync();

            var createdIndividualDto = _mapper.Map<IndividualDto>(individual);

            return CreatedAtAction(nameof(GetIndividual), new { id = createdIndividualDto.Id }, createdIndividualDto);
        }


        /// <summary>
        /// A PARTIR DAQUI É ORGANIZATIONS
        /// </summary>
 

        // GET: api/tmf632/partyManagement/organization
        [HttpGet("organization")]
        public async Task<ActionResult<IEnumerable<OrganizationDto>>> GetOrganizations()
        {
            var organizations = await _context.Organizations.ToListAsync();
            IEnumerable<OrganizationDto> organizationDto = _mapper.Map<IEnumerable<OrganizationDto>>(organizations);
            return Ok(organizationDto);//retorna uma lista de todas as organizações
        }

        // GET: api/tmf632/partyManagement/organization/{id}
        [HttpGet("organization/{id}")]
        public async Task<ActionResult<OrganizationDto>> GetOrganization(string id)
        {
            var organization = await _context.Organizations.FindAsync(id);

            if (organization == null)
            {
                return NotFound();
            }

            return _mapper.Map<OrganizationDto>(organization);
        }


        // POST: api/tmf632/partyManagement/organization
        [HttpPost("organization")]
        public async Task<ActionResult<IndividualDto>> PostOrganization(OrganizationDto organizationDto)
        {
            var organization = _mapper.Map<Organization>(organizationDto);

            // Garantir que um novo ID seja gerado para a nova organização
            organization.Id = Guid.NewGuid().ToString();

            _context.Organizations.Add(organization);
            await _context.SaveChangesAsync();

            var createdOrganizationDto = _mapper.Map<OrganizationDto>(organization);

            return CreatedAtAction(nameof(GetIndividual), new { id = createdOrganizationDto.Id }, createdOrganizationDto);
        }
    }
}


E:\Usuários\RBV\Downloads\C#\TMFORUM\ODA\Tmf632.PartyManagement.Api\Data\PartyManagementDbContext.cs
using Microsoft.EntityFrameworkCore;
using Tmf632.PartyManagement.Api.Models; // Certifique-se de que o namespace esteja correto

namespace Tmf632.PartyManagement.Api.Data
{
    public class PartyManagementDbContext : DbContext
    {
        public PartyManagementDbContext(DbContextOptions<PartyManagementDbContext> options) : base(options)
        {
        }

        // Propriedades DbSet representam as coleções de entidades
        // que serão mapeadas para tabelas no banco de dados.
        public DbSet<Individual> Individuals { get; set; }
        public DbSet<Organization> Organizations { get; set; }


        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            // Define "ODA" como o schema padrão para todas as tabelas neste DbContext.
            modelBuilder.HasDefaultSchema("ODA");

        }

    }
}


E:\Usuários\RBV\Downloads\C#\TMFORUM\ODA\Tmf632.PartyManagement.Api\Mappings\MappingProfile.cs
using AutoMapper;
using Tmf632.PartyManagement.Api.Models;
using Tmf632.PartyManagement.Api.Models.Dtos;

namespace Tmf632.PartyManagement.Api.Mappings
{
    public class MappingProfile : Profile // Inherit from AutoMapper's Profile class
    {
        public MappingProfile() // Constructor to define mappings
        {
            CreateMap<Individual, IndividualDto>().ReverseMap(); // Define mapping between Individual and IndividualDto
            CreateMap<Organization, OrganizationDto>().ReverseMap();


            // Mapeamentos para as entidades aninhadas
            CreateMap<ContactMedium, ContactMediumDto>().ReverseMap();
            CreateMap<RelatedParty, RelatedPartyDto>().ReverseMap();
            CreateMap<Characteristic, CharacteristicDto>().ReverseMap();
        }
    }
}


E:\Usuários\RBV\Downloads\C#\TMFORUM\ODA\Tmf632.PartyManagement.Api\Migrations\20250829153615_InitialCreate.cs
using System;
using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace Tmf632.PartyManagement.Api.Migrations
{
    /// <inheritdoc />
    public partial class InitialCreate : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.CreateTable(
                name: "Individuals",
                columns: table => new
                {
                    Id = table.Column<string>(type: "nvarchar(450)", nullable: false),
                    FamilyName = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    GivenName = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    FullName = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Gender = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Nationality = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    BirthDate = table.Column<DateTime>(type: "datetime2", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Individuals", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "Organizations",
                columns: table => new
                {
                    Id = table.Column<string>(type: "nvarchar(450)", nullable: false),
                    Name = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    TradingName = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    StartDate = table.Column<DateTime>(type: "datetime2", nullable: true),
                    EndDate = table.Column<DateTime>(type: "datetime2", nullable: true),
                    IsHeadOffice = table.Column<string>(type: "nvarchar(max)", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Organizations", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "Characteristic",
                columns: table => new
                {
                    Id = table.Column<string>(type: "nvarchar(450)", nullable: false),
                    Name = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Value = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    IndividualId = table.Column<string>(type: "nvarchar(450)", nullable: false),
                    OrganizationId = table.Column<string>(type: "nvarchar(450)", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Characteristic", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Characteristic_Individuals_IndividualId",
                        column: x => x.IndividualId,
                        principalTable: "Individuals",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_Characteristic_Organizations_OrganizationId",
                        column: x => x.OrganizationId,
                        principalTable: "Organizations",
                        principalColumn: "Id");
                });

            migrationBuilder.CreateTable(
                name: "ContactMedium",
                columns: table => new
                {
                    Id = table.Column<string>(type: "nvarchar(450)", nullable: false),
                    MediumType = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Preferred = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Value = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    IndividualId = table.Column<string>(type: "nvarchar(450)", nullable: false),
                    OrganizationId = table.Column<string>(type: "nvarchar(450)", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ContactMedium", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ContactMedium_Individuals_IndividualId",
                        column: x => x.IndividualId,
                        principalTable: "Individuals",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_ContactMedium_Organizations_OrganizationId",
                        column: x => x.OrganizationId,
                        principalTable: "Organizations",
                        principalColumn: "Id");
                });

            migrationBuilder.CreateTable(
                name: "RelatedParty",
                columns: table => new
                {
                    Id = table.Column<string>(type: "nvarchar(450)", nullable: false),
                    PartyId = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Role = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    RelationshipType = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    IndividualId = table.Column<string>(type: "nvarchar(450)", nullable: false),
                    OrganizationId = table.Column<string>(type: "nvarchar(450)", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RelatedParty", x => x.Id);
                    table.ForeignKey(
                        name: "FK_RelatedParty_Individuals_IndividualId",
                        column: x => x.IndividualId,
                        principalTable: "Individuals",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_RelatedParty_Organizations_OrganizationId",
                        column: x => x.OrganizationId,
                        principalTable: "Organizations",
                        principalColumn: "Id");
                });

            migrationBuilder.CreateIndex(
                name: "IX_Characteristic_IndividualId",
                table: "Characteristic",
                column: "IndividualId");

            migrationBuilder.CreateIndex(
                name: "IX_Characteristic_OrganizationId",
                table: "Characteristic",
                column: "OrganizationId");

            migrationBuilder.CreateIndex(
                name: "IX_ContactMedium_IndividualId",
                table: "ContactMedium",
                column: "IndividualId");

            migrationBuilder.CreateIndex(
                name: "IX_ContactMedium_OrganizationId",
                table: "ContactMedium",
                column: "OrganizationId");

            migrationBuilder.CreateIndex(
                name: "IX_RelatedParty_IndividualId",
                table: "RelatedParty",
                column: "IndividualId");

            migrationBuilder.CreateIndex(
                name: "IX_RelatedParty_OrganizationId",
                table: "RelatedParty",
                column: "OrganizationId");
        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropTable(
                name: "Characteristic");

            migrationBuilder.DropTable(
                name: "ContactMedium");

            migrationBuilder.DropTable(
                name: "RelatedParty");

            migrationBuilder.DropTable(
                name: "Individuals");

            migrationBuilder.DropTable(
                name: "Organizations");
        }
    }
}


E:\Usuários\RBV\Downloads\C#\TMFORUM\ODA\Tmf632.PartyManagement.Api\Migrations\20250829153615_InitialCreate.Designer.cs
// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Tmf632.PartyManagement.Api.Data;

#nullable disable

namespace Tmf632.PartyManagement.Api.Migrations
{
    [DbContext(typeof(PartyManagementDbContext))]
    [Migration("20250829153615_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Tmf632.PartyManagement.Api.Models.Characteristic", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("IndividualId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrganizationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IndividualId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("Characteristic");
                });

            modelBuilder.Entity("Tmf632.PartyManagement.Api.Models.ContactMedium", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("IndividualId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MediumType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrganizationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Preferred")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IndividualId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("ContactMedium");
                });

            modelBuilder.Entity("Tmf632.PartyManagement.Api.Models.Individual", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FamilyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GivenName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nationality")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Individuals");
                });

            modelBuilder.Entity("Tmf632.PartyManagement.Api.Models.Organization", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("IsHeadOffice")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TradingName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Organizations");
                });

            modelBuilder.Entity("Tmf632.PartyManagement.Api.Models.RelatedParty", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("IndividualId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("OrganizationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PartyId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RelationshipType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IndividualId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("RelatedParty");
                });

            modelBuilder.Entity("Tmf632.PartyManagement.Api.Models.Characteristic", b =>
                {
                    b.HasOne("Tmf632.PartyManagement.Api.Models.Individual", null)
                        .WithMany("Characteristic")
                        .HasForeignKey("IndividualId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tmf632.PartyManagement.Api.Models.Organization", null)
                        .WithMany("Characteristic")
                        .HasForeignKey("OrganizationId");
                });

            modelBuilder.Entity("Tmf632.PartyManagement.Api.Models.ContactMedium", b =>
                {
                    b.HasOne("Tmf632.PartyManagement.Api.Models.Individual", null)
                        .WithMany("ContactMedium")
                        .HasForeignKey("IndividualId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tmf632.PartyManagement.Api.Models.Organization", null)
                        .WithMany("ContactMedium")
                        .HasForeignKey("OrganizationId");
                });

            modelBuilder.Entity("Tmf632.PartyManagement.Api.Models.RelatedParty", b =>
                {
                    b.HasOne("Tmf632.PartyManagement.Api.Models.Individual", null)
                        .WithMany("RelatedParty")
                        .HasForeignKey("IndividualId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tmf632.PartyManagement.Api.Models.Organization", null)
                        .WithMany("RelatedParty")
                        .HasForeignKey("OrganizationId");
                });

            modelBuilder.Entity("Tmf632.PartyManagement.Api.Models.Individual", b =>
                {
                    b.Navigation("Characteristic");

                    b.Navigation("ContactMedium");

                    b.Navigation("RelatedParty");
                });

            modelBuilder.Entity("Tmf632.PartyManagement.Api.Models.Organization", b =>
                {
                    b.Navigation("Characteristic");

                    b.Navigation("ContactMedium");

                    b.Navigation("RelatedParty");
                });
#pragma warning restore 612, 618
        }
    }
}


E:\Usuários\RBV\Downloads\C#\TMFORUM\ODA\Tmf632.PartyManagement.Api\Migrations\20250901212310_AddIsHeadOfficeAsBooleanToOrganization.cs
using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace Tmf632.PartyManagement.Api.Migrations
{
    /// <inheritdoc />
    public partial class AddIsHeadOfficeAsBooleanToOrganization : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {

        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {

        }
    }
}


E:\Usuários\RBV\Downloads\C#\TMFORUM\ODA\Tmf632.PartyManagement.Api\Migrations\20250901212310_AddIsHeadOfficeAsBooleanToOrganization.Designer.cs
// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Tmf632.PartyManagement.Api.Data;

#nullable disable

namespace Tmf632.PartyManagement.Api.Migrations
{
    [DbContext(typeof(PartyManagementDbContext))]
    [Migration("20250901212310_AddIsHeadOfficeAsBooleanToOrganization")]
    partial class AddIsHeadOfficeAsBooleanToOrganization
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Tmf632.PartyManagement.Api.Models.Characteristic", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("IndividualId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrganizationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IndividualId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("Characteristic");
                });

            modelBuilder.Entity("Tmf632.PartyManagement.Api.Models.ContactMedium", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("IndividualId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MediumType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrganizationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Preferred")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IndividualId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("ContactMedium");
                });

            modelBuilder.Entity("Tmf632.PartyManagement.Api.Models.Individual", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FamilyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GivenName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nationality")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Individuals");
                });

            modelBuilder.Entity("Tmf632.PartyManagement.Api.Models.Organization", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("IsHeadOffice")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TradingName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Organizations");
                });

            modelBuilder.Entity("Tmf632.PartyManagement.Api.Models.RelatedParty", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("IndividualId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("OrganizationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PartyId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RelationshipType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IndividualId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("RelatedParty");
                });

            modelBuilder.Entity("Tmf632.PartyManagement.Api.Models.Characteristic", b =>
                {
                    b.HasOne("Tmf632.PartyManagement.Api.Models.Individual", null)
                        .WithMany("Characteristic")
                        .HasForeignKey("IndividualId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tmf632.PartyManagement.Api.Models.Organization", null)
                        .WithMany("Characteristic")
                        .HasForeignKey("OrganizationId");
                });

            modelBuilder.Entity("Tmf632.PartyManagement.Api.Models.ContactMedium", b =>
                {
                    b.HasOne("Tmf632.PartyManagement.Api.Models.Individual", null)
                        .WithMany("ContactMedium")
                        .HasForeignKey("IndividualId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tmf632.PartyManagement.Api.Models.Organization", null)
                        .WithMany("ContactMedium")
                        .HasForeignKey("OrganizationId");
                });

            modelBuilder.Entity("Tmf632.PartyManagement.Api.Models.RelatedParty", b =>
                {
                    b.HasOne("Tmf632.PartyManagement.Api.Models.Individual", null)
                        .WithMany("RelatedParty")
                        .HasForeignKey("IndividualId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tmf632.PartyManagement.Api.Models.Organization", null)
                        .WithMany("RelatedParty")
                        .HasForeignKey("OrganizationId");
                });

            modelBuilder.Entity("Tmf632.PartyManagement.Api.Models.Individual", b =>
                {
                    b.Navigation("Characteristic");

                    b.Navigation("ContactMedium");

                    b.Navigation("RelatedParty");
                });

            modelBuilder.Entity("Tmf632.PartyManagement.Api.Models.Organization", b =>
                {
                    b.Navigation("Characteristic");

                    b.Navigation("ContactMedium");

                    b.Navigation("RelatedParty");
                });
#pragma warning restore 612, 618
        }
    }
}


E:\Usuários\RBV\Downloads\C#\TMFORUM\ODA\Tmf632.PartyManagement.Api\Migrations\20250901213241_AddIsHeadOfficeAsBooleanToOrganization2.cs
using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace Tmf632.PartyManagement.Api.Migrations
{
    /// <inheritdoc />
    public partial class AddIsHeadOfficeAsBooleanToOrganization2 : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.AlterColumn<bool>(
                name: "IsHeadOffice",
                table: "Organizations",
                type: "bit",
                nullable: false,
                oldClrType: typeof(string),
                oldType: "nvarchar(max)");
        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.AlterColumn<string>(
                name: "IsHeadOffice",
                table: "Organizations",
                type: "nvarchar(max)",
                nullable: false,
                oldClrType: typeof(bool),
                oldType: "bit");
        }
    }
}


E:\Usuários\RBV\Downloads\C#\TMFORUM\ODA\Tmf632.PartyManagement.Api\Migrations\20250901213241_AddIsHeadOfficeAsBooleanToOrganization2.Designer.cs
// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Tmf632.PartyManagement.Api.Data;

#nullable disable

namespace Tmf632.PartyManagement.Api.Migrations
{
    [DbContext(typeof(PartyManagementDbContext))]
    [Migration("20250901213241_AddIsHeadOfficeAsBooleanToOrganization2")]
    partial class AddIsHeadOfficeAsBooleanToOrganization2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Tmf632.PartyManagement.Api.Models.Characteristic", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("IndividualId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrganizationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IndividualId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("Characteristic");
                });

            modelBuilder.Entity("Tmf632.PartyManagement.Api.Models.ContactMedium", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("IndividualId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MediumType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrganizationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Preferred")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IndividualId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("ContactMedium");
                });

            modelBuilder.Entity("Tmf632.PartyManagement.Api.Models.Individual", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FamilyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GivenName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nationality")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Individuals");
                });

            modelBuilder.Entity("Tmf632.PartyManagement.Api.Models.Organization", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsHeadOffice")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TradingName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Organizations");
                });

            modelBuilder.Entity("Tmf632.PartyManagement.Api.Models.RelatedParty", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("IndividualId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("OrganizationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PartyId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RelationshipType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IndividualId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("RelatedParty");
                });

            modelBuilder.Entity("Tmf632.PartyManagement.Api.Models.Characteristic", b =>
                {
                    b.HasOne("Tmf632.PartyManagement.Api.Models.Individual", null)
                        .WithMany("Characteristic")
                        .HasForeignKey("IndividualId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tmf632.PartyManagement.Api.Models.Organization", null)
                        .WithMany("Characteristic")
                        .HasForeignKey("OrganizationId");
                });

            modelBuilder.Entity("Tmf632.PartyManagement.Api.Models.ContactMedium", b =>
                {
                    b.HasOne("Tmf632.PartyManagement.Api.Models.Individual", null)
                        .WithMany("ContactMedium")
                        .HasForeignKey("IndividualId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tmf632.PartyManagement.Api.Models.Organization", null)
                        .WithMany("ContactMedium")
                        .HasForeignKey("OrganizationId");
                });

            modelBuilder.Entity("Tmf632.PartyManagement.Api.Models.RelatedParty", b =>
                {
                    b.HasOne("Tmf632.PartyManagement.Api.Models.Individual", null)
                        .WithMany("RelatedParty")
                        .HasForeignKey("IndividualId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tmf632.PartyManagement.Api.Models.Organization", null)
                        .WithMany("RelatedParty")
                        .HasForeignKey("OrganizationId");
                });

            modelBuilder.Entity("Tmf632.PartyManagement.Api.Models.Individual", b =>
                {
                    b.Navigation("Characteristic");

                    b.Navigation("ContactMedium");

                    b.Navigation("RelatedParty");
                });

            modelBuilder.Entity("Tmf632.PartyManagement.Api.Models.Organization", b =>
                {
                    b.Navigation("Characteristic");

                    b.Navigation("ContactMedium");

                    b.Navigation("RelatedParty");
                });
#pragma warning restore 612, 618
        }
    }
}


E:\Usuários\RBV\Downloads\C#\TMFORUM\ODA\Tmf632.PartyManagement.Api\Migrations\20250901213526_UpdateIsHeadOfficeToBoolean.cs
using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace Tmf632.PartyManagement.Api.Migrations
{
    /// <inheritdoc />
    public partial class UpdateIsHeadOfficeToBoolean : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {

        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {

        }
    }
}


E:\Usuários\RBV\Downloads\C#\TMFORUM\ODA\Tmf632.PartyManagement.Api\Migrations\20250901213526_UpdateIsHeadOfficeToBoolean.Designer.cs
// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Tmf632.PartyManagement.Api.Data;

#nullable disable

namespace Tmf632.PartyManagement.Api.Migrations
{
    [DbContext(typeof(PartyManagementDbContext))]
    [Migration("20250901213526_UpdateIsHeadOfficeToBoolean")]
    partial class UpdateIsHeadOfficeToBoolean
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Tmf632.PartyManagement.Api.Models.Characteristic", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("IndividualId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrganizationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IndividualId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("Characteristic");
                });

            modelBuilder.Entity("Tmf632.PartyManagement.Api.Models.ContactMedium", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("IndividualId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MediumType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrganizationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Preferred")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IndividualId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("ContactMedium");
                });

            modelBuilder.Entity("Tmf632.PartyManagement.Api.Models.Individual", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FamilyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GivenName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nationality")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Individuals");
                });

            modelBuilder.Entity("Tmf632.PartyManagement.Api.Models.Organization", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsHeadOffice")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TradingName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Organizations");
                });

            modelBuilder.Entity("Tmf632.PartyManagement.Api.Models.RelatedParty", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("IndividualId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("OrganizationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PartyId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RelationshipType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IndividualId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("RelatedParty");
                });

            modelBuilder.Entity("Tmf632.PartyManagement.Api.Models.Characteristic", b =>
                {
                    b.HasOne("Tmf632.PartyManagement.Api.Models.Individual", null)
                        .WithMany("Characteristic")
                        .HasForeignKey("IndividualId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tmf632.PartyManagement.Api.Models.Organization", null)
                        .WithMany("Characteristic")
                        .HasForeignKey("OrganizationId");
                });

            modelBuilder.Entity("Tmf632.PartyManagement.Api.Models.ContactMedium", b =>
                {
                    b.HasOne("Tmf632.PartyManagement.Api.Models.Individual", null)
                        .WithMany("ContactMedium")
                        .HasForeignKey("IndividualId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tmf632.PartyManagement.Api.Models.Organization", null)
                        .WithMany("ContactMedium")
                        .HasForeignKey("OrganizationId");
                });

            modelBuilder.Entity("Tmf632.PartyManagement.Api.Models.RelatedParty", b =>
                {
                    b.HasOne("Tmf632.PartyManagement.Api.Models.Individual", null)
                        .WithMany("RelatedParty")
                        .HasForeignKey("IndividualId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tmf632.PartyManagement.Api.Models.Organization", null)
                        .WithMany("RelatedParty")
                        .HasForeignKey("OrganizationId");
                });

            modelBuilder.Entity("Tmf632.PartyManagement.Api.Models.Individual", b =>
                {
                    b.Navigation("Characteristic");

                    b.Navigation("ContactMedium");

                    b.Navigation("RelatedParty");
                });

            modelBuilder.Entity("Tmf632.PartyManagement.Api.Models.Organization", b =>
                {
                    b.Navigation("Characteristic");

                    b.Navigation("ContactMedium");

                    b.Navigation("RelatedParty");
                });
#pragma warning restore 612, 618
        }
    }
}


E:\Usuários\RBV\Downloads\C#\TMFORUM\ODA\Tmf632.PartyManagement.Api\Migrations\20250904123026_NomeDaMigracao.cs
using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace Tmf632.PartyManagement.Api.Migrations
{
    /// <inheritdoc />
    public partial class NomeDaMigracao : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.AlterColumn<bool>(
                name: "Preferred",
                table: "ContactMedium",
                type: "bit",
                nullable: false,
                oldClrType: typeof(string),
                oldType: "nvarchar(max)");
        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.AlterColumn<string>(
                name: "Preferred",
                table: "ContactMedium",
                type: "nvarchar(max)",
                nullable: false,
                oldClrType: typeof(bool),
                oldType: "bit");
        }
    }
}


E:\Usuários\RBV\Downloads\C#\TMFORUM\ODA\Tmf632.PartyManagement.Api\Migrations\20250904123026_NomeDaMigracao.Designer.cs
// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Tmf632.PartyManagement.Api.Data;

#nullable disable

namespace Tmf632.PartyManagement.Api.Migrations
{
    [DbContext(typeof(PartyManagementDbContext))]
    [Migration("20250904123026_NomeDaMigracao")]
    partial class NomeDaMigracao
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Tmf632.PartyManagement.Api.Models.Characteristic", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("IndividualId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrganizationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IndividualId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("Characteristic");
                });

            modelBuilder.Entity("Tmf632.PartyManagement.Api.Models.ContactMedium", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("IndividualId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MediumType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrganizationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("Preferred")
                        .HasColumnType("bit");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IndividualId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("ContactMedium");
                });

            modelBuilder.Entity("Tmf632.PartyManagement.Api.Models.Individual", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FamilyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GivenName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nationality")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Individuals");
                });

            modelBuilder.Entity("Tmf632.PartyManagement.Api.Models.Organization", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsHeadOffice")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TradingName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Organizations");
                });

            modelBuilder.Entity("Tmf632.PartyManagement.Api.Models.RelatedParty", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("IndividualId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("OrganizationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PartyId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RelationshipType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IndividualId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("RelatedParty");
                });

            modelBuilder.Entity("Tmf632.PartyManagement.Api.Models.Characteristic", b =>
                {
                    b.HasOne("Tmf632.PartyManagement.Api.Models.Individual", null)
                        .WithMany("Characteristic")
                        .HasForeignKey("IndividualId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tmf632.PartyManagement.Api.Models.Organization", null)
                        .WithMany("Characteristic")
                        .HasForeignKey("OrganizationId");
                });

            modelBuilder.Entity("Tmf632.PartyManagement.Api.Models.ContactMedium", b =>
                {
                    b.HasOne("Tmf632.PartyManagement.Api.Models.Individual", null)
                        .WithMany("ContactMedium")
                        .HasForeignKey("IndividualId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tmf632.PartyManagement.Api.Models.Organization", null)
                        .WithMany("ContactMedium")
                        .HasForeignKey("OrganizationId");
                });

            modelBuilder.Entity("Tmf632.PartyManagement.Api.Models.RelatedParty", b =>
                {
                    b.HasOne("Tmf632.PartyManagement.Api.Models.Individual", null)
                        .WithMany("RelatedParty")
                        .HasForeignKey("IndividualId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tmf632.PartyManagement.Api.Models.Organization", null)
                        .WithMany("RelatedParty")
                        .HasForeignKey("OrganizationId");
                });

            modelBuilder.Entity("Tmf632.PartyManagement.Api.Models.Individual", b =>
                {
                    b.Navigation("Characteristic");

                    b.Navigation("ContactMedium");

                    b.Navigation("RelatedParty");
                });

            modelBuilder.Entity("Tmf632.PartyManagement.Api.Models.Organization", b =>
                {
                    b.Navigation("Characteristic");

                    b.Navigation("ContactMedium");

                    b.Navigation("RelatedParty");
                });
#pragma warning restore 612, 618
        }
    }
}


E:\Usuários\RBV\Downloads\C#\TMFORUM\ODA\Tmf632.PartyManagement.Api\Migrations\20250904125426_NovasChavesParaOrganizacao.cs
using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace Tmf632.PartyManagement.Api.Migrations
{
    /// <inheritdoc />
    public partial class NovasChavesParaOrganizacao : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropForeignKey(
                name: "FK_Characteristic_Individuals_IndividualId",
                table: "Characteristic");

            migrationBuilder.DropForeignKey(
                name: "FK_ContactMedium_Individuals_IndividualId",
                table: "ContactMedium");

            migrationBuilder.DropForeignKey(
                name: "FK_RelatedParty_Individuals_IndividualId",
                table: "RelatedParty");

            migrationBuilder.AlterColumn<string>(
                name: "IndividualId",
                table: "RelatedParty",
                type: "nvarchar(450)",
                nullable: true,
                oldClrType: typeof(string),
                oldType: "nvarchar(450)");

            migrationBuilder.AlterColumn<string>(
                name: "IndividualId",
                table: "ContactMedium",
                type: "nvarchar(450)",
                nullable: true,
                oldClrType: typeof(string),
                oldType: "nvarchar(450)");

            migrationBuilder.AlterColumn<string>(
                name: "IndividualId",
                table: "Characteristic",
                type: "nvarchar(450)",
                nullable: true,
                oldClrType: typeof(string),
                oldType: "nvarchar(450)");

            migrationBuilder.AddForeignKey(
                name: "FK_Characteristic_Individuals_IndividualId",
                table: "Characteristic",
                column: "IndividualId",
                principalTable: "Individuals",
                principalColumn: "Id");

            migrationBuilder.AddForeignKey(
                name: "FK_ContactMedium_Individuals_IndividualId",
                table: "ContactMedium",
                column: "IndividualId",
                principalTable: "Individuals",
                principalColumn: "Id");

            migrationBuilder.AddForeignKey(
                name: "FK_RelatedParty_Individuals_IndividualId",
                table: "RelatedParty",
                column: "IndividualId",
                principalTable: "Individuals",
                principalColumn: "Id");
        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropForeignKey(
                name: "FK_Characteristic_Individuals_IndividualId",
                table: "Characteristic");

            migrationBuilder.DropForeignKey(
                name: "FK_ContactMedium_Individuals_IndividualId",
                table: "ContactMedium");

            migrationBuilder.DropForeignKey(
                name: "FK_RelatedParty_Individuals_IndividualId",
                table: "RelatedParty");

            migrationBuilder.AlterColumn<string>(
                name: "IndividualId",
                table: "RelatedParty",
                type: "nvarchar(450)",
                nullable: false,
                defaultValue: "",
                oldClrType: typeof(string),
                oldType: "nvarchar(450)",
                oldNullable: true);

            migrationBuilder.AlterColumn<string>(
                name: "IndividualId",
                table: "ContactMedium",
                type: "nvarchar(450)",
                nullable: false,
                defaultValue: "",
                oldClrType: typeof(string),
                oldType: "nvarchar(450)",
                oldNullable: true);

            migrationBuilder.AlterColumn<string>(
                name: "IndividualId",
                table: "Characteristic",
                type: "nvarchar(450)",
                nullable: false,
                defaultValue: "",
                oldClrType: typeof(string),
                oldType: "nvarchar(450)",
                oldNullable: true);

            migrationBuilder.AddForeignKey(
                name: "FK_Characteristic_Individuals_IndividualId",
                table: "Characteristic",
                column: "IndividualId",
                principalTable: "Individuals",
                principalColumn: "Id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "FK_ContactMedium_Individuals_IndividualId",
                table: "ContactMedium",
                column: "IndividualId",
                principalTable: "Individuals",
                principalColumn: "Id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "FK_RelatedParty_Individuals_IndividualId",
                table: "RelatedParty",
                column: "IndividualId",
                principalTable: "Individuals",
                principalColumn: "Id",
                onDelete: ReferentialAction.Cascade);
        }
    }
}


E:\Usuários\RBV\Downloads\C#\TMFORUM\ODA\Tmf632.PartyManagement.Api\Migrations\20250904125426_NovasChavesParaOrganizacao.Designer.cs
// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Tmf632.PartyManagement.Api.Data;

#nullable disable

namespace Tmf632.PartyManagement.Api.Migrations
{
    [DbContext(typeof(PartyManagementDbContext))]
    [Migration("20250904125426_NovasChavesParaOrganizacao")]
    partial class NovasChavesParaOrganizacao
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Tmf632.PartyManagement.Api.Models.Characteristic", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("IndividualId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrganizationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IndividualId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("Characteristic");
                });

            modelBuilder.Entity("Tmf632.PartyManagement.Api.Models.ContactMedium", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("IndividualId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MediumType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrganizationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("Preferred")
                        .HasColumnType("bit");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IndividualId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("ContactMedium");
                });

            modelBuilder.Entity("Tmf632.PartyManagement.Api.Models.Individual", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FamilyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GivenName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nationality")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Individuals");
                });

            modelBuilder.Entity("Tmf632.PartyManagement.Api.Models.Organization", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsHeadOffice")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TradingName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Organizations");
                });

            modelBuilder.Entity("Tmf632.PartyManagement.Api.Models.RelatedParty", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("IndividualId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("OrganizationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PartyId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RelationshipType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IndividualId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("RelatedParty");
                });

            modelBuilder.Entity("Tmf632.PartyManagement.Api.Models.Characteristic", b =>
                {
                    b.HasOne("Tmf632.PartyManagement.Api.Models.Individual", "Individual")
                        .WithMany("Characteristic")
                        .HasForeignKey("IndividualId");

                    b.HasOne("Tmf632.PartyManagement.Api.Models.Organization", "Organization")
                        .WithMany("Characteristic")
                        .HasForeignKey("OrganizationId");

                    b.Navigation("Individual");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("Tmf632.PartyManagement.Api.Models.ContactMedium", b =>
                {
                    b.HasOne("Tmf632.PartyManagement.Api.Models.Individual", "Individual")
                        .WithMany("ContactMedium")
                        .HasForeignKey("IndividualId");

                    b.HasOne("Tmf632.PartyManagement.Api.Models.Organization", "Organization")
                        .WithMany("ContactMedium")
                        .HasForeignKey("OrganizationId");

                    b.Navigation("Individual");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("Tmf632.PartyManagement.Api.Models.RelatedParty", b =>
                {
                    b.HasOne("Tmf632.PartyManagement.Api.Models.Individual", "Individual")
                        .WithMany("RelatedParty")
                        .HasForeignKey("IndividualId");

                    b.HasOne("Tmf632.PartyManagement.Api.Models.Organization", "Organization")
                        .WithMany("RelatedParty")
                        .HasForeignKey("OrganizationId");

                    b.Navigation("Individual");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("Tmf632.PartyManagement.Api.Models.Individual", b =>
                {
                    b.Navigation("Characteristic");

                    b.Navigation("ContactMedium");

                    b.Navigation("RelatedParty");
                });

            modelBuilder.Entity("Tmf632.PartyManagement.Api.Models.Organization", b =>
                {
                    b.Navigation("Characteristic");

                    b.Navigation("ContactMedium");

                    b.Navigation("RelatedParty");
                });
#pragma warning restore 612, 618
        }
    }
}


E:\Usuários\RBV\Downloads\C#\TMFORUM\ODA\Tmf632.PartyManagement.Api\Migrations\20250904142505_AddAuditFieldsToPartyInteraction.cs
using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace Tmf632.PartyManagement.Api.Migrations
{
    /// <inheritdoc />
    public partial class AddAuditFieldsToPartyInteraction : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {

        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {

        }
    }
}


E:\Usuários\RBV\Downloads\C#\TMFORUM\ODA\Tmf632.PartyManagement.Api\Migrations\20250904142505_AddAuditFieldsToPartyInteraction.Designer.cs
// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Tmf632.PartyManagement.Api.Data;

#nullable disable

namespace Tmf632.PartyManagement.Api.Migrations
{
    [DbContext(typeof(PartyManagementDbContext))]
    [Migration("20250904142505_AddAuditFieldsToPartyInteraction")]
    partial class AddAuditFieldsToPartyInteraction
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Tmf632.PartyManagement.Api.Models.Characteristic", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("IndividualId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrganizationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IndividualId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("Characteristic");
                });

            modelBuilder.Entity("Tmf632.PartyManagement.Api.Models.ContactMedium", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("IndividualId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MediumType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrganizationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("Preferred")
                        .HasColumnType("bit");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IndividualId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("ContactMedium");
                });

            modelBuilder.Entity("Tmf632.PartyManagement.Api.Models.Individual", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FamilyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GivenName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nationality")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Individuals");
                });

            modelBuilder.Entity("Tmf632.PartyManagement.Api.Models.Organization", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsHeadOffice")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TradingName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Organizations");
                });

            modelBuilder.Entity("Tmf632.PartyManagement.Api.Models.RelatedParty", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("IndividualId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("OrganizationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PartyId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RelationshipType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IndividualId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("RelatedParty");
                });

            modelBuilder.Entity("Tmf632.PartyManagement.Api.Models.Characteristic", b =>
                {
                    b.HasOne("Tmf632.PartyManagement.Api.Models.Individual", "Individual")
                        .WithMany("Characteristic")
                        .HasForeignKey("IndividualId");

                    b.HasOne("Tmf632.PartyManagement.Api.Models.Organization", "Organization")
                        .WithMany("Characteristic")
                        .HasForeignKey("OrganizationId");

                    b.Navigation("Individual");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("Tmf632.PartyManagement.Api.Models.ContactMedium", b =>
                {
                    b.HasOne("Tmf632.PartyManagement.Api.Models.Individual", "Individual")
                        .WithMany("ContactMedium")
                        .HasForeignKey("IndividualId");

                    b.HasOne("Tmf632.PartyManagement.Api.Models.Organization", "Organization")
                        .WithMany("ContactMedium")
                        .HasForeignKey("OrganizationId");

                    b.Navigation("Individual");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("Tmf632.PartyManagement.Api.Models.RelatedParty", b =>
                {
                    b.HasOne("Tmf632.PartyManagement.Api.Models.Individual", "Individual")
                        .WithMany("RelatedParty")
                        .HasForeignKey("IndividualId");

                    b.HasOne("Tmf632.PartyManagement.Api.Models.Organization", "Organization")
                        .WithMany("RelatedParty")
                        .HasForeignKey("OrganizationId");

                    b.Navigation("Individual");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("Tmf632.PartyManagement.Api.Models.Individual", b =>
                {
                    b.Navigation("Characteristic");

                    b.Navigation("ContactMedium");

                    b.Navigation("RelatedParty");
                });

            modelBuilder.Entity("Tmf632.PartyManagement.Api.Models.Organization", b =>
                {
                    b.Navigation("Characteristic");

                    b.Navigation("ContactMedium");

                    b.Navigation("RelatedParty");
                });
#pragma warning restore 612, 618
        }
    }
}


E:\Usuários\RBV\Downloads\C#\TMFORUM\ODA\Tmf632.PartyManagement.Api\Migrations\20250908131429_InitialCreateWithOdaSchema.cs
using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace Tmf632.PartyManagement.Api.Migrations
{
    /// <inheritdoc />
    public partial class InitialCreateWithOdaSchema : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.EnsureSchema(
                name: "ODA");

            migrationBuilder.RenameTable(
                name: "RelatedParty",
                newName: "RelatedParty",
                newSchema: "ODA");

            migrationBuilder.RenameTable(
                name: "Organizations",
                newName: "Organizations",
                newSchema: "ODA");

            migrationBuilder.RenameTable(
                name: "Individuals",
                newName: "Individuals",
                newSchema: "ODA");

            migrationBuilder.RenameTable(
                name: "ContactMedium",
                newName: "ContactMedium",
                newSchema: "ODA");

            migrationBuilder.RenameTable(
                name: "Characteristic",
                newName: "Characteristic",
                newSchema: "ODA");
        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.RenameTable(
                name: "RelatedParty",
                schema: "ODA",
                newName: "RelatedParty");

            migrationBuilder.RenameTable(
                name: "Organizations",
                schema: "ODA",
                newName: "Organizations");

            migrationBuilder.RenameTable(
                name: "Individuals",
                schema: "ODA",
                newName: "Individuals");

            migrationBuilder.RenameTable(
                name: "ContactMedium",
                schema: "ODA",
                newName: "ContactMedium");

            migrationBuilder.RenameTable(
                name: "Characteristic",
                schema: "ODA",
                newName: "Characteristic");
        }
    }
}


E:\Usuários\RBV\Downloads\C#\TMFORUM\ODA\Tmf632.PartyManagement.Api\Migrations\20250908131429_InitialCreateWithOdaSchema.Designer.cs
// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Tmf632.PartyManagement.Api.Data;

#nullable disable

namespace Tmf632.PartyManagement.Api.Migrations
{
    [DbContext(typeof(PartyManagementDbContext))]
    [Migration("20250908131429_InitialCreateWithOdaSchema")]
    partial class InitialCreateWithOdaSchema
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("ODA")
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Tmf632.PartyManagement.Api.Models.Characteristic", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("IndividualId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrganizationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IndividualId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("Characteristic", "ODA");
                });

            modelBuilder.Entity("Tmf632.PartyManagement.Api.Models.ContactMedium", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("IndividualId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MediumType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrganizationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("Preferred")
                        .HasColumnType("bit");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IndividualId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("ContactMedium", "ODA");
                });

            modelBuilder.Entity("Tmf632.PartyManagement.Api.Models.Individual", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FamilyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GivenName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nationality")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Individuals", "ODA");
                });

            modelBuilder.Entity("Tmf632.PartyManagement.Api.Models.Organization", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsHeadOffice")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TradingName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Organizations", "ODA");
                });

            modelBuilder.Entity("Tmf632.PartyManagement.Api.Models.RelatedParty", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("IndividualId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("OrganizationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PartyId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RelationshipType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IndividualId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("RelatedParty", "ODA");
                });

            modelBuilder.Entity("Tmf632.PartyManagement.Api.Models.Characteristic", b =>
                {
                    b.HasOne("Tmf632.PartyManagement.Api.Models.Individual", "Individual")
                        .WithMany("Characteristic")
                        .HasForeignKey("IndividualId");

                    b.HasOne("Tmf632.PartyManagement.Api.Models.Organization", "Organization")
                        .WithMany("Characteristic")
                        .HasForeignKey("OrganizationId");

                    b.Navigation("Individual");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("Tmf632.PartyManagement.Api.Models.ContactMedium", b =>
                {
                    b.HasOne("Tmf632.PartyManagement.Api.Models.Individual", "Individual")
                        .WithMany("ContactMedium")
                        .HasForeignKey("IndividualId");

                    b.HasOne("Tmf632.PartyManagement.Api.Models.Organization", "Organization")
                        .WithMany("ContactMedium")
                        .HasForeignKey("OrganizationId");

                    b.Navigation("Individual");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("Tmf632.PartyManagement.Api.Models.RelatedParty", b =>
                {
                    b.HasOne("Tmf632.PartyManagement.Api.Models.Individual", "Individual")
                        .WithMany("RelatedParty")
                        .HasForeignKey("IndividualId");

                    b.HasOne("Tmf632.PartyManagement.Api.Models.Organization", "Organization")
                        .WithMany("RelatedParty")
                        .HasForeignKey("OrganizationId");

                    b.Navigation("Individual");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("Tmf632.PartyManagement.Api.Models.Individual", b =>
                {
                    b.Navigation("Characteristic");

                    b.Navigation("ContactMedium");

                    b.Navigation("RelatedParty");
                });

            modelBuilder.Entity("Tmf632.PartyManagement.Api.Models.Organization", b =>
                {
                    b.Navigation("Characteristic");

                    b.Navigation("ContactMedium");

                    b.Navigation("RelatedParty");
                });
#pragma warning restore 612, 618
        }
    }
}


E:\Usuários\RBV\Downloads\C#\TMFORUM\ODA\Tmf632.PartyManagement.Api\Migrations\PartyManagementDbContextModelSnapshot.cs
// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Tmf632.PartyManagement.Api.Data;

#nullable disable

namespace Tmf632.PartyManagement.Api.Migrations
{
    [DbContext(typeof(PartyManagementDbContext))]
    partial class PartyManagementDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("ODA")
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Tmf632.PartyManagement.Api.Models.Characteristic", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("IndividualId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrganizationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IndividualId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("Characteristic", "ODA");
                });

            modelBuilder.Entity("Tmf632.PartyManagement.Api.Models.ContactMedium", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("IndividualId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MediumType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrganizationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("Preferred")
                        .HasColumnType("bit");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IndividualId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("ContactMedium", "ODA");
                });

            modelBuilder.Entity("Tmf632.PartyManagement.Api.Models.Individual", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FamilyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GivenName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nationality")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Individuals", "ODA");
                });

            modelBuilder.Entity("Tmf632.PartyManagement.Api.Models.Organization", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsHeadOffice")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TradingName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Organizations", "ODA");
                });

            modelBuilder.Entity("Tmf632.PartyManagement.Api.Models.RelatedParty", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("IndividualId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("OrganizationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PartyId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RelationshipType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IndividualId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("RelatedParty", "ODA");
                });

            modelBuilder.Entity("Tmf632.PartyManagement.Api.Models.Characteristic", b =>
                {
                    b.HasOne("Tmf632.PartyManagement.Api.Models.Individual", "Individual")
                        .WithMany("Characteristic")
                        .HasForeignKey("IndividualId");

                    b.HasOne("Tmf632.PartyManagement.Api.Models.Organization", "Organization")
                        .WithMany("Characteristic")
                        .HasForeignKey("OrganizationId");

                    b.Navigation("Individual");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("Tmf632.PartyManagement.Api.Models.ContactMedium", b =>
                {
                    b.HasOne("Tmf632.PartyManagement.Api.Models.Individual", "Individual")
                        .WithMany("ContactMedium")
                        .HasForeignKey("IndividualId");

                    b.HasOne("Tmf632.PartyManagement.Api.Models.Organization", "Organization")
                        .WithMany("ContactMedium")
                        .HasForeignKey("OrganizationId");

                    b.Navigation("Individual");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("Tmf632.PartyManagement.Api.Models.RelatedParty", b =>
                {
                    b.HasOne("Tmf632.PartyManagement.Api.Models.Individual", "Individual")
                        .WithMany("RelatedParty")
                        .HasForeignKey("IndividualId");

                    b.HasOne("Tmf632.PartyManagement.Api.Models.Organization", "Organization")
                        .WithMany("RelatedParty")
                        .HasForeignKey("OrganizationId");

                    b.Navigation("Individual");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("Tmf632.PartyManagement.Api.Models.Individual", b =>
                {
                    b.Navigation("Characteristic");

                    b.Navigation("ContactMedium");

                    b.Navigation("RelatedParty");
                });

            modelBuilder.Entity("Tmf632.PartyManagement.Api.Models.Organization", b =>
                {
                    b.Navigation("Characteristic");

                    b.Navigation("ContactMedium");

                    b.Navigation("RelatedParty");
                });
#pragma warning restore 612, 618
        }
    }
}


E:\Usuários\RBV\Downloads\C#\TMFORUM\ODA\Tmf632.PartyManagement.Api\Models\Characteristic.cs
using Microsoft.AspNetCore.Mvc.ModelBinding.Validation;
using System.ComponentModel.DataAnnotations;

namespace Tmf632.PartyManagement.Api.Models
{
    // Classe para características estendidas (atributos personalizados)
    public class Characteristic
    {
        [Key]
        [ValidateNever]
        public string Id { get; set; } = Guid.NewGuid().ToString();
        public string Name { get; set; }
        public string Value { get; set; }

        // Foreign key for the parent Individual entity
        public string? IndividualId { get; set; }
        public Individual? Individual { get; set; }


        // Foreign key for the parent Organization entity
        public string? OrganizationId { get; set; }
        public Organization? Organization { get; set; }

    }

}


E:\Usuários\RBV\Downloads\C#\TMFORUM\ODA\Tmf632.PartyManagement.Api\Models\ContactMedium.cs
using Microsoft.AspNetCore.Mvc.ModelBinding.Validation;
using System.ComponentModel.DataAnnotations;

namespace Tmf632.PartyManagement.Api.Models
{
    // Classe para informações de contato (ex: email, telefone)
    public class ContactMedium
    {
        [Key]
        [ValidateNever]
        public string Id { get; set; } = Guid.NewGuid().ToString();
        public string MediumType { get; set; }
        public bool Preferred { get; set; }
        public string Value { get; set; }

        // Foreign key for the parent Individual entity
        public string? IndividualId { get; set; }
        public Individual? Individual { get; set; }

        // Foreign key for the parent Organization entity
        public string? OrganizationId { get; set; }
        public Organization? Organization { get; set; }

    }
    

}


E:\Usuários\RBV\Downloads\C#\TMFORUM\ODA\Tmf632.PartyManagement.Api\Models\Individual.cs
using Microsoft.AspNetCore.Mvc.ModelBinding.Validation;
using System.ComponentModel.DataAnnotations;
using System.Reflection.PortableExecutable;
using System.Text.Json.Serialization;

namespace Tmf632.PartyManagement.Api.Models
{
    public class Individual
    {

        // A anotação [Key] define esta propriedade como a chave primária
        // do banco de dados.
        [Key]
        [ValidateNever]
        public string Id { get; set; } 

        // Propriedades para dados pessoais básicos
        [Required]
        public string FamilyName { get; set; }
        [Required]
        public string GivenName { get; set; }
        [Required]
        public string FullName { get; set; }

        // Propriedades para contato e endereço
        [Required]
        public string Gender { get; set; }
        [Required]
        public string Nationality { get; set; }
        public DateTime? BirthDate { get; set; }

        // Coleções para relacionamentos com outras entidades
        // O Entity Framework Core irá mapear estas coleções automaticamente.
        public List<ContactMedium> ContactMedium { get; set; } = new();
        public List<RelatedParty> RelatedParty { get; set; } = new();
        public List<Characteristic> Characteristic { get; set; } = new();

    }
}


E:\Usuários\RBV\Downloads\C#\TMFORUM\ODA\Tmf632.PartyManagement.Api\Models\Organization.cs
using Microsoft.AspNetCore.Mvc.ModelBinding.Validation;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;

namespace Tmf632.PartyManagement.Api.Models
{
    public class Organization
    {
        // A anotação [Key] define esta propriedade como a chave primária.
        [Key]
        [ValidateNever]
        public string Id { get; set; }

        // Propriedades para dados da organização.
        [Required]
        public string Name { get; set; }
        [Required]
        public string TradingName { get; set; }
        public DateTime? StartDate { get; set; }
        public DateTime? EndDate { get; set; }

        public bool IsHeadOffice { get; set; }

        // Coleções para relacionamentos com outras entidades, seguindo o padrão
        // que usamos para a classe Individual.
        public List<ContactMedium> ContactMedium { get; set; } = new();
        public List<RelatedParty> RelatedParty { get; set; } = new();
        public List<Characteristic> Characteristic { get; set; } = new();

    }
}



E:\Usuários\RBV\Downloads\C#\TMFORUM\ODA\Tmf632.PartyManagement.Api\Models\RelatedParty.cs
using Microsoft.AspNetCore.Mvc.ModelBinding.Validation;
using System.ComponentModel.DataAnnotations;

namespace Tmf632.PartyManagement.Api.Models
{
    // Classe para relacionamentos com outras entidades ou partes
    public class RelatedParty
    {
        [Key]
        [ValidateNever]
        public string Id { get; set; } = Guid.NewGuid().ToString();
        public string PartyId { get; set; }
        public string Role { get; set; }
        public string RelationshipType { get; set; }

        // Foreign key for the parent Individual entity
        public string? IndividualId { get; set; }
        public Individual? Individual { get; set; }


        // Foreign key for the parent Organization entity
        public string? OrganizationId { get; set; }
        public Organization? Organization { get; set; }

    }
}


E:\Usuários\RBV\Downloads\C#\TMFORUM\ODA\Tmf683.PartyInteraction.Api\Controllers\PartyInteractionController.cs
using AutoMapper;
using System.Net;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Tmf683.PartyInteraction.Application.Models.Dtos.Requests;
using Tmf683.PartyInteraction.Application.Models.Dtos.Responses;
using Tmf683.PartyInteraction.Application.Models.APIs;
using Tmf683.PartyInteraction.Application.Services.Interfaces;
using Tmf683.PartyInteraction.Domain.Entities;
using Microsoft.Extensions.Options;
using Tmf683.PartyInteraction.Infrastructure.Data;




[ApiController]
[Route("api/[controller]")]
public class PartyInteractionController : ControllerBase
{
    private readonly PartyInteractionDbContext _context; //Utiliza o DB Context direto mas paulatinamente será substituído pelo _service
    private readonly IMapper _mapper;
    private readonly IHttpClientFactory _httpClientFactory;
    private readonly Tmf632ApiConfiguration _tmf632Config; // Configuração da API TMF632
    private readonly IPartyInteractionService _service; //service de acesso aos dados



    public PartyInteractionController(
        PartyInteractionDbContext context,
        IMapper mapper, 
        IHttpClientFactory httpClientFactory, //Cliente HTTP para chamadas externas
        IOptions<Tmf632ApiConfiguration> tmf632Config, // injeção de configuração dos dados da API TMF632
        IPartyInteractionService service) 
    {
        _context = context;
        _mapper = mapper;
        _httpClientFactory = httpClientFactory;
        _tmf632Config = tmf632Config.Value;
        _service = service;

    }


    //Traz a relação de todas as interações do cliente ou organização
    [HttpGet]
    public async Task<IActionResult> GetAllPartyInteractions()
    {
        var result = await _service.GetAllPartyInteractionsAsync();
        return Ok(result);
    }

    //Consulta uma interação específica pelo seu ID
    [HttpGet("{id}")]
    public async Task<ActionResult<PartyInteractionResponseDto>> GetPartyInteractionsById(string id)
    {
        var interaction = await _context.PartyInteractions.Include(pi => pi.RelatedParty).FirstOrDefaultAsync(pi => pi.Id == id);

        if (interaction == null)
        {
            return NotFound();
        }

        return Ok(_mapper.Map<PartyInteractionResponseDto>(interaction));
    }


    // Operação de UPDATE (PATCH) em uma interação, seguindo o padrão TM Forum
    [HttpPatch("{id}")]
    public async Task<IActionResult> UpdatePartyInteraction(string id, [FromBody] PartyInteractionUpdateDto dto)
    {
        //chamada do serviço que implementa a lógica de patch
        return await _service.PatchPartyInteractionAsync(id, dto);

    }



    //Este POST é para criar uma nova interação para um cliente ou organização, o cliente ou organização deve existir na API TMF632
    //A API TMF683 Party Interaction atua como um orquestrador. Ela não armazena dados de Individual ou Organization em seu próprio banco de dados,
    //mas sim consulta a fonte oficial (TMF632) e armazena apenas a referência, criando uma nova interação associada a esse PartyId em seu banco de dados.
    //TO DO - Implementar o patter service/repository
    [HttpPost]
    public async Task<IActionResult> CreatePartyInteraction([FromBody] PartyInteractionCreateDto interactionDto)
    {
        // 1. Validação de dados de entrada
        if (!ModelState.IsValid)
        {
            return BadRequest(ModelState);
        }

        // 2. Orquestração: Valida se o PartyId existe na API no POST recebido
        var relatedPartyRefDto = interactionDto.RelatedParty.FirstOrDefault();
        if (relatedPartyRefDto == null)
        {
            return BadRequest("A Party Interaction deve ter pelo menos um Related Party.");
        }

        //Cria o cliente HTTP para chamar a API TMF632
        var client = _httpClientFactory.CreateClient("PartyManagementClient");

        // Define a URL base para o cliente HTTP usando a configuração injetada
        var endpointUrl = $"{_tmf632Config.BaseUrl}{_tmf632Config.GetIndividualEndpoint}{relatedPartyRefDto.Id}";

        // Chama a API TMF632 para buscar os dados do PartyID
        var response = await client.GetAsync(endpointUrl);

        if (response.StatusCode == HttpStatusCode.NotFound)
        {
            return NotFound($"PartyId '{relatedPartyRefDto.Id}' não encontrado na API TMF632.");
        }

        if (!response.IsSuccessStatusCode)
        {
            return StatusCode((int)response.StatusCode, await response.Content.ReadAsStringAsync());
        }

        // 3. Conversão e persistência
        var interaction = _mapper.Map<PartyInteraction>(interactionDto);

        // Define valores padrão para os campos
        interaction.Id = Guid.NewGuid().ToString();
        interaction.CreationDate = DateTime.UtcNow;
        interaction.LastUpdateDate = DateTime.UtcNow;
        interaction.Status = "Iniciado"; // ou outro status inicial padrão

        foreach (var relatedPartyRef in interaction.RelatedParty)
        {
            relatedPartyRef.PartyInteractionId = interaction.Id;
        }

        _context.PartyInteractions.Add(interaction);
        await _context.SaveChangesAsync();

        // 4. Retorno HTTP com o recurso criado
        var createdInteractionDto = _mapper.Map<PartyInteractionCreateDto>(interaction);
        return CreatedAtAction(nameof(GetPartyInteractionsById), new { id = interaction.Id}, createdInteractionDto);
    }


    [HttpDelete("{id}")]
    public async Task<IActionResult> DeletePartyInteraction(string id)
    {
        //TO DO - Implementar lógica de exclusão
        return NoContent();
    }
}


E:\Usuários\RBV\Downloads\C#\TMFORUM\ODA\Tmf683.PartyInteraction.Application\Common\ApiResponse.cs
namespace Tmf683.PartyInteraction.Application.Common;
public class ApiResponse<T>
{
    public bool IsSuccess { get; set; }
    public T Result { get; set; }
    public int StatusCode { get; set; }
    public List<string> ErrorMessages { get; set; } = new List<string>();

    public static ApiResponse<T> Success(T result, int statusCode = 200)
    {
        return new ApiResponse<T> { IsSuccess = true, Result = result, StatusCode = statusCode };
    }

    public static ApiResponse<T> Fail(string errorMessage, int statusCode = 400)
    {
        return new ApiResponse<T> { IsSuccess = false, ErrorMessages = new List<string> { errorMessage }, StatusCode = statusCode };
    }

    public static ApiResponse<T> Fail(List<string> errorMessages, int statusCode = 400)
    {
        return new ApiResponse<T> { IsSuccess = false, ErrorMessages = errorMessages, StatusCode = statusCode };
    }
}

E:\Usuários\RBV\Downloads\C#\TMFORUM\ODA\Tmf683.PartyInteraction.Application\Mappings\AutoMapperProfile.cs
using AutoMapper;
using Tmf683.PartyInteraction.Application.Models.Dtos;
using Tmf683.PartyInteraction.Application.Models.Dtos.Requests;
using Tmf683.PartyInteraction.Application.Models.Dtos.Responses;
using Tmf683.PartyInteraction.Domain.Entities;

namespace Tmf683.PartyInteraction.Application.Mappings
{
    /// <summary>
    /// Define todos os mapeamentos entre as Entidades de domínio e os Data Transfer Objects (DTOs).
    /// Esta é a fonte única da verdade para a lógica de conversão de objetos.
    /// </summary>
    public class AutoMapperProfile : Profile
    {
        public AutoMapperProfile()
        {
            // --- Mapeamentos para o Recurso Principal: PartyInteraction ---

            // Para Respostas (GET): Mapeamento completo da Entidade para o DTO de resposta.
            CreateMap<Domain.Entities.PartyInteraction, PartyInteractionResponseDto>();

            // Para Criação (POST): Mapeamento do DTO de criação para a Entidade.
            CreateMap<PartyInteractionCreateDto, Domain.Entities.PartyInteraction>();

            // Para Atualização (PATCH): Mapeamento do DTO de atualização para a Entidade.
            CreateMap<PartyInteractionUpdateDto, Domain.Entities.PartyInteraction>()
                // Ignora listas nulas no DTO para não apagar dados existentes na entidade.
                .ForAllMembers(opts => opts.Condition((src, dest, srcMember) => srcMember != null));

            // --- Mapeamentos para Entidades Aninhadas e Auxiliares ---

            // Mapeamentos bidirecionais (.ReverseMap()) para entidades com estruturas semelhantes.
            CreateMap<RelatedPartyOrPartyRole, RelatedPartyOrPartyRoleDto>().ReverseMap();
            CreateMap<InteractionItem, InteractionItemDto>().ReverseMap();
            CreateMap<ExternalIdentifier, ExternalIdentifierDto>().ReverseMap();
            CreateMap<InteractionRelationship, InteractionRelationshipDto>().ReverseMap();
            CreateMap<Note, NoteDto>().ReverseMap();
            CreateMap<RelatedChannel, RelatedChannelDto>().ReverseMap();

            // Mapeamento customizado para AttachmentRefOrValue devido à estrutura TimePeriod
            CreateMap<AttachmentRefOrValue, AttachmentRefOrValueDto>()
                .ForMember(dest => dest.ValidFor,
                           opt => opt.MapFrom(src =>
                               (src.ValidForStart.HasValue || src.ValidForEnd.HasValue)
                               ? new TimePeriodDto { StartDateTime = src.ValidForStart, EndDateTime = src.ValidForEnd }
                               : null));

            CreateMap<AttachmentRefOrValueDto, AttachmentRefOrValue>()
                .ForMember(dest => dest.ValidForStart,
                           opt => opt.MapFrom(src => src.ValidFor != null ? src.ValidFor.StartDateTime : (DateTime?)null))
                .ForMember(dest => dest.ValidForEnd,
                           opt => opt.MapFrom(src => src.ValidFor != null ? src.ValidFor.EndDateTime : (DateTime?)null));

            // Mapeamento para o DTO auxiliar TimePeriod
            //CreateMap<TimePeriodDto, TimePeriod>().ReverseMap(); // Supondo que você tenha uma entidade TimePeriod se precisar
        }
    }
}


E:\Usuários\RBV\Downloads\C#\TMFORUM\ODA\Tmf683.PartyInteraction.Application\Repositories\IPartyInteractionRepository.cs
using Tmf683.PartyInteraction.Domain.Entities;

namespace Tmf683.PartyInteraction.Application.Repositories

{
    public interface IPartyInteractionRepository
    {
        //GET All Interactions
        Task<IEnumerable<Domain.Entities.PartyInteraction>> GetAllPartyInteractionsAsync();
        //GET by ID
        Task<Domain.Entities.PartyInteraction?> GetPartyInteractionByIdAsync(string id);
        //UPDATE
        Task UpdatePartyInteractionAsync(Domain.Entities.PartyInteraction entity);

        Task RemovePartyInteractionAsync(RelatedPartyOrPartyRole entity);

        Task SaveChangesAsync();

    }


}


E:\Usuários\RBV\Downloads\C#\TMFORUM\ODA\Tmf683.PartyInteraction.Application\Services\PartyInteractionService.cs
using AutoMapper;
using System.ComponentModel.DataAnnotations;
using Tmf683.PartyInteraction.Application.Models.Dtos.Requests;
using Tmf683.PartyInteraction.Application.Models.Dtos.Responses;
using Tmf683.PartyInteraction.Application.Services.Interfaces;

using Tmf683.PartyInteraction.Application.Models.Dtos;
using Microsoft.AspNetCore.Mvc;
using Tmf683.PartyInteraction.Domain.Entities;
using Tmf683.PartyInteraction.Application.Repositories;

namespace Tmf683.PartyInteraction.Application.Services
{
    public class PartyInteractionService : IPartyInteractionService
    {
        #region SETTINGS da Classe
        private readonly IPartyInteractionRepository _repository;
        private readonly IMapper _mapper;

        public PartyInteractionService(IPartyInteractionRepository repository, IMapper mapper)
        {
            _repository = repository;
            _mapper = mapper;
        }
        #endregion


        //GET ALL Interactions
        public async Task<IEnumerable<PartyInteractionResponseDto>> GetAllPartyInteractionsAsync()
        {
            var interactions = await _repository.GetAllPartyInteractionsAsync();
            return _mapper.Map<IEnumerable<PartyInteractionResponseDto>>(interactions);
        }

        //GET by ID
        public async Task<PartyInteractionResponseDto?> GetPartyInteractionByIdAsync(string id)
        {
            var interaction = await _repository.GetPartyInteractionByIdAsync(id);
            return _mapper.Map<PartyInteractionResponseDto>(interaction);
        }


        //PATCH
        public async Task<IActionResult> PatchPartyInteractionAsync(string id, PartyInteractionUpdateDto dto)
        {
            //Na operação de PATCH o ID não deve vir no corpo e sim na URL  
            if (!string.IsNullOrEmpty(id))
                return new BadRequestObjectResult("O ID na URL deve ser fornecido.");

            //Busca a interação existente no banco de dados mas utiliza o método GetPartyInteractionByIdAsync do repositório
            var existing = await _repository.GetPartyInteractionByIdAsync(id);

            if (existing == null)
                return new NotFoundResult();

            //Aplica os patches nos campos fornecidos no DTO  
            ApplyPatch(existing.Description, dto.Description, val => existing.Description = val);
            ApplyPatch(existing.Status, dto.Status, val => existing.Status = val);
            //ApplyPatch(existing.RelatedChannel, dto.RelatedChannel, val => existing.RelatedChannel = val);

            // Atualiza ou adiciona RelatedParty conforme fornecido no DTO dentro da entidade PartyInteract  
            foreach (var relatedPartyDto in dto.RelatedParty ?? Enumerable.Empty<RelatedPartyOrPartyRoleDto>())
            {

                var existingRelatedParty = existing.RelatedParty.FirstOrDefault(rp => rp.Id == relatedPartyDto.Id);

                if (existingRelatedParty != null)
                {
                    ApplyPatch(existingRelatedParty.Role, relatedPartyDto.Role, val => existingRelatedParty.Role = val);
                    ApplyPatch(existingRelatedParty.Id, relatedPartyDto.Id, val => existingRelatedParty.Id = val);
                }
                else
                {
                    var newRp = _mapper.Map<RelatedPartyOrPartyRole>(relatedPartyDto);
                }
            }



            // Atualiza a data de última modificação  
            existing.LastUpdateDate = DateTime.UtcNow;

            // Valida o modelo atualizado antes de salvar  
            if (!TryValidateModel(existing))
                return new BadRequestObjectResult(new ValidationProblemDetails());

            // Salva as alterações no banco de dados  
            await _repository.SaveChangesAsync();
            return new NoContentResult();
        }

        //PUT/UPDATE
        public async Task<bool> UpdatePartyInteractionAsync(string id, PartyInteractionUpdateDto dto)
        {

            // 1. Validar ID
            if (string.IsNullOrWhiteSpace(id))
                throw new ArgumentException("O ID da URL deve ser informado.");

            // 2. Validar campos obrigatórios
            if (!IsComplete(dto, out var missingFields))
                throw new ArgumentException($"Campos obrigatórios ausentes: {string.Join(", ", missingFields)}");

            // 3. Buscar entidade existente
            var existing = await _repository.GetPartyInteractionByIdAsync(id);
            if (existing == null)
                throw new KeyNotFoundException("Interação não encontrada.");

            // 4. Mapear DTO para entidade
            var updatedEntity = _mapper.Map<Domain.Entities.PartyInteraction>(dto);
            updatedEntity.LastUpdateDate = DateTime.UtcNow;

            // 5. Persistir
            await _repository.UpdatePartyInteractionAsync(updatedEntity);

            return true;

        }




        #region Métodos Auxiliares
        //Método genérico para fazer substituição de valores somente nos campos onde realmente ocorreram alterações
        private void ApplyPatch<T>(T currentValue, T newValue, Action<T> setter, Func<T, T, bool> comparer = null)
        {
            if (newValue != null && !(comparer?.Invoke(currentValue, newValue) ?? newValue.Equals(currentValue)))
                setter(newValue);
        }


        //Método para validar o modelo depois de feitas todas as alterações de inserções e deletes na estrutura da entidade
        //valida os dados contra a estrutura de dados definada no modelo das entidades
        private bool TryValidateModel(object model)
        {
            var validationContext = new ValidationContext(model);
            var results = new List<ValidationResult>();
            return Validator.TryValidateObject(model, validationContext, results, true);
        }

        //Método para validar se todos os campos obrigatórios estão presentes no DTO para a operação de PUT
        private bool IsComplete(PartyInteractionUpdateDto dto, out List<string> missingFields)
        {
            missingFields = new();

            if (string.IsNullOrWhiteSpace(dto.Status)) missingFields.Add("Status");
            //if (string.IsNullOrWhiteSpace(dto.Channel)) missingFields.Add("Channel");
            if (string.IsNullOrWhiteSpace(dto.Description)) missingFields.Add("Description");
            if (dto.RelatedParty == null || !dto.RelatedParty.Any()) missingFields.Add("RelatedParty");

            return !missingFields.Any();
        }


        #endregion
    }
}


E:\Usuários\RBV\Downloads\C#\TMFORUM\ODA\Tmf683.PartyInteraction.Domain\Entities\AttachmentRefOrValue.cs
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Text.Json.Serialization;

namespace Tmf683.PartyInteraction.Domain.Entities
{
    [Table("Attachments")]
    public class AttachmentRefOrValue
    {
        [Key]
        public string Id { get; set; } = Guid.NewGuid().ToString();

        // --- Atributos de Metadados TMF ---
        [Column("@baseType")]
        public string? BaseType { get; set; }

        [Column("@type")]
        public string? Type { get; set; } // Discriminador: "Attachment" ou "AttachmentRef"

        [Column("@schemaLocation")]
        public string? SchemaLocation { get; set; }

        [Column("@referredType")]
        public string? ReferredType { get; set; }

        // --- Atributos de Negócio Comuns ---
        public string? Href { get; set; }
        public string? Description { get; set; }
        public string? Name { get; set; }
        public string? Url { get; set; }

        // --- Atributos para Attachment (Value) ---
        public string? Content { get; set; }
        public string? MimeType { get; set; }
        public long? Size { get; set; }
        public DateTime? ValidForStart { get; set; }
        public DateTime? ValidForEnd { get; set; }

        // --- Chave Estrangeira ---
        public string PartyInteractionId { get; set; }

        [JsonIgnore]
        public PartyInteraction PartyInteraction { get; set; }

        // --- Chave Estrangeira para o Item PAI (Opcional) ---
        // Nova chave estrangeira para se relacionar com um InteractionItem.
        public string? InteractionItemId { get; set; }

        [JsonIgnore]
        public InteractionItem? InteractionItem { get; set; }
    }
}


E:\Usuários\RBV\Downloads\C#\TMFORUM\ODA\Tmf683.PartyInteraction.Domain\Entities\ExternalIdentifier.cs
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Text.Json.Serialization;

namespace Tmf683.PartyInteraction.Domain.Entities
{
    [Table("ExternalIdentifiers")]
    public class ExternalIdentifier
    {
        [Key]
        public string Id { get; set; } = Guid.NewGuid().ToString();

        // --- Atributos de Metadados TMF ---
        [Column("@baseType")]
        public string? BaseType { get; set; }

        [Column("@type")]
        public string? Type { get; set; }

        [Column("@schemaLocation")]
        public string? SchemaLocation { get; set; }

        // --- Atributos de Negócio ---
        // O valor do ID no sistema externo. Ex: "TICKET-12345"
        public string? ExternalIdValue { get; set; }

        // O tipo do identificador. Ex: "TicketNumber"
        public string? ExternalIdType { get; set; }

        // O nome do sistema dono do ID. Ex: "ServiceNow"
        public string? Owner { get; set; }

        // --- Chave Estrangeira ---
        public string PartyInteractionId { get; set; }

        [JsonIgnore]
        public PartyInteraction PartyInteraction { get; set; }
    }
}

E:\Usuários\RBV\Downloads\C#\TMFORUM\ODA\Tmf683.PartyInteraction.Domain\Entities\InteractionItem.cs
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Text.Json.Serialization;

namespace Tmf683.PartyInteraction.Domain.Entities
{
    [Table("InteractionItems")]
    public class InteractionItem
    {
        [Key]
        public string Id { get; set; } = Guid.NewGuid().ToString();

        // --- Atributos de Metadados TMF ---
        [Column("@baseType")]
        public string? BaseType { get; set; }

        [Column("@type")]
        public string? Type { get; set; }

        [Column("@schemaLocation")]
        public string? SchemaLocation { get; set; }

        // --- Atributos de Negócio ---
        public string? ItemType { get; set; } // Ex: "Diagnóstico", "Criação de Ticket"
        public string? Description { get; set; }

        // --- Atributos de Auditoria ---
        public DateTime CreationDate { get; set; }
        public DateTime? LastUpdateDate { get; set; }

        // --- Chave Estrangeira para a Interação PAI ---
        public string PartyInteractionId { get; set; }

        [JsonIgnore]
        public PartyInteraction PartyInteraction { get; set; }

        public List<Note> Note { get; set; } = new();
        public List<AttachmentRefOrValue> Attachment { get; set; } = new();
        public List<RelatedPartyOrPartyRole> RelatedParty { get; set; } = new();


        // --- Relacionamentos do PRÓPRIO Item ---
        // Um item pode ter seus próprios relacionamentos, notas, etc.
        // A implementação completa exigiria que as entidades Note, RelatedChannel, etc.,
        // tivessem uma chave estrangeira para InteractionItem (além da de PartyInteraction).
        // Por simplicidade nesta fase, declaramos as listas. A refatoração do banco
        // para suportar a dupla FK é um passo avançado.
        // public List<InteractionItemRelationship> InteractionItemRelationship { get; set; } = new();
        // public List<Note> Note { get; set; } = new();
        // ... e assim por diante.
    }
}

E:\Usuários\RBV\Downloads\C#\TMFORUM\ODA\Tmf683.PartyInteraction.Domain\Entities\InteractionRelationship.cs
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Text.Json.Serialization;

namespace Tmf683.PartyInteraction.Domain.Entities
{
    [Table("InteractionRelationships")]
    public class InteractionRelationship
    {
        [Key]
        public string Id { get; set; } = Guid.NewGuid().ToString();

        // --- Atributos de Metadados TMF ---
        [Column("@baseType")]
        public string? BaseType { get; set; }

        [Column("@type")]
        public string? Type { get; set; }

        [Column("@schemaLocation")]
        public string? SchemaLocation { get; set; }

        [Column("@referredType")]
        public string? ReferredType { get; set; }

        // --- Atributos de Negócio ---
        public string? Href { get; set; } // Link para a interação relacionada
        public string? Name { get; set; } // Nome descritivo do relacionamento
        public string? RelationshipType { get; set; } // Ex: "follows"

        // O ID da outra PartyInteraction que está sendo referenciada.
        public string? TargetInteractionId { get; set; }

        // --- Chave Estrangeira ---
        public string PartyInteractionId { get; set; }

        [JsonIgnore]
        public PartyInteraction PartyInteraction { get; set; }
    }
}

E:\Usuários\RBV\Downloads\C#\TMFORUM\ODA\Tmf683.PartyInteraction.Domain\Entities\Note.cs
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Text.Json.Serialization;

namespace Tmf683.PartyInteraction.Domain.Entities
{
    [Table("Notes")]
    public class Note
    {
        [Key]
        public string Id { get; set; } = Guid.NewGuid().ToString();

        // --- Atributos de Metadados TMF ---
        [Column("@baseType")]
        public string? BaseType { get; set; }

        [Column("@type")]
        public string? Type { get; set; }

        [Column("@schemaLocation")]
        public string? SchemaLocation { get; set; }

        // --- Atributos de Negócio ---
        public string? Author { get; set; }
        public DateTime Date { get; set; }
        public string? Text { get; set; }

        // --- Chave Estrangeira ---
        public string? PartyInteractionId { get; set; }
        [JsonIgnore]
        public PartyInteraction? PartyInteraction { get; set; }

        public string? InteractionItemId { get; set; }
        [JsonIgnore]
        public InteractionItem? InteractionItem { get; set; }
    }
}


E:\Usuários\RBV\Downloads\C#\TMFORUM\ODA\Tmf683.PartyInteraction.Domain\Entities\PartyInteraction.cs
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace Tmf683.PartyInteraction.Domain.Entities
{
    [Table("PartyInteractions")]
    public class PartyInteraction
    {
        [Key]
        public string Id { get; set; }

        public string? Href { get; set; } // Novo: Link canônico para o recurso.

        // --- Atributos de Metadados TMF ---
        [Column("@baseType")] // Mapeamento para nomes com caracteres especiais
        public string? BaseType { get; set; }

        [Column("@type")]
        public string? Type { get; set; }

        [Column("@schemaLocation")]
        public string? SchemaLocation { get; set; }

        // --- Atributos de Negócio ---
        public string? Description { get; set; }
        public string? Reason { get; set; } // Novo: Motivo da interação.
        public string? Status { get; set; }

        // O "interactionDate" do TMF é um TimePeriod. Modelamos com início e fim.
        public DateTime? InteractionStartDate { get; set; } // Novo
        public DateTime? InteractionEndDate { get; set; }   // Novo

        // --- Atributos de Auditoria ---
        public DateTime CreationDate { get; set; }
        public DateTime? LastUpdateDate { get; set; }

        // --- Relacionamentos (1 para N) ---
        public List<ExternalIdentifier> ExternalIdentifier { get; set; } = new();
        public List<InteractionRelationship> InteractionRelationship { get; set; } = new();
        public List<Note> Note { get; set; } = new();
        public List<InteractionItem> InteractionItem { get; set; } = new();
        public List<RelatedPartyOrPartyRole> RelatedParty { get; set; } = new();
        public List<RelatedChannel> RelatedChannel { get; set; } = new();
        public List<AttachmentRefOrValue> Attachment { get; set; } = new();
    }
}

E:\Usuários\RBV\Downloads\C#\TMFORUM\ODA\Tmf683.PartyInteraction.Domain\Entities\RelatedChannel.cs
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Text.Json.Serialization;

namespace Tmf683.PartyInteraction.Domain.Entities
{
    [Table("RelatedChannels")]
    public class RelatedChannel
    {
        [Key]
        public string Id { get; set; } = Guid.NewGuid().ToString();

        // --- Atributos de Metadados TMF ---
        [Column("@baseType")]
        public string? BaseType { get; set; }

        [Column("@type")]
        public string? Type { get; set; }

        [Column("@schemaLocation")]
        public string? SchemaLocation { get; set; }

        [Column("@referredType")]
        public string? ReferredType { get; set; }

        // --- Atributos de Negócio ---
        public string? Href { get; set; }
        public string? Name { get; set; }
        public string? Role { get; set; } // Ex: "Canal de Origem"

        // --- Chave Estrangeira ---
        public string PartyInteractionId { get; set; }

        [JsonIgnore]
        public PartyInteraction PartyInteraction { get; set; }
    }
}


E:\Usuários\RBV\Downloads\C#\TMFORUM\ODA\Tmf683.PartyInteraction.Domain\Entities\RelatedPartyOrPartyRole.cs
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Text.Json.Serialization;

namespace Tmf683.PartyInteraction.Domain.Entities
{
    [Table("RelatedParties")]
    public class RelatedPartyOrPartyRole
    {
        [Key]
        public string Id { get; set; } = Guid.NewGuid().ToString();

        // --- Atributos de Metadados TMF ---
        [Column("@baseType")]
        public string? BaseType { get; set; }

        [Column("@type")]
        public string? Type { get; set; }

        [Column("@schemaLocation")]
        public string? SchemaLocation { get; set; }

        // Discriminador que indica se a referência é para 'Party' ou 'PartyRole'.
        [Column("@referredType")]
        public string? ReferredType { get; set; }

        // --- Atributos de Negócio ---
        public string? Href { get; set; }
        public string? Name { get; set; }
        public string? Role { get; set; } // O papel nesta interação específica.

        // --- Chave Estrangeira ---
        public string PartyInteractionId { get; set; }

        [JsonIgnore]
        public PartyInteraction PartyInteraction { get; set; }

        // --- Chave Estrangeira para o Item PAI (Opcional) ---
        // Nova chave estrangeira para se relacionar com um InteractionItem.
        public string? InteractionItemId { get; set; }

        [JsonIgnore]
        public InteractionItem? InteractionItem { get; set; }
    }
}


E:\Usuários\RBV\Downloads\C#\TMFORUM\ODA\Tmf683.PartyInteraction.Infrastructure\Data\PartyInteractionDbContext.cs
using Microsoft.EntityFrameworkCore;
using System.Reflection.Emit;
using Tmf683.PartyInteraction.Domain.Entities;

namespace Tmf683.PartyInteraction.Infrastructure.Data
{
    public class PartyInteractionDbContext : DbContext
    {
        public PartyInteractionDbContext(DbContextOptions<PartyInteractionDbContext> options) : base(options)
        {
        }

        // --- Mapeamento das Entidades para Tabelas ---

        // Tabela principal
        public DbSet<Domain.Entities.PartyInteraction> PartyInteractions { get; set; }

        // Tabelas para as entidades aninhadas/relacionadas
        public DbSet<RelatedPartyOrPartyRole> RelatedParties { get; set; }
        public DbSet<Note> Notes { get; set; }
        public DbSet<InteractionItem> InteractionItems { get; set; }
        public DbSet<InteractionRelationship> InteractionRelationships { get; set; }
        public DbSet<ExternalIdentifier> ExternalIdentifiers { get; set; }
        public DbSet<RelatedChannel> RelatedChannels { get; set; }
        public DbSet<AttachmentRefOrValue> Attachments { get; set; }

        // O método OnModelCreating é usado para configurar o modelo de forma explícita.
        // É uma boa prática para definir relacionamentos complexos.
        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            // Define "ODA" como o schema padrão para todas as tabelas neste DbContext.
            modelBuilder.HasDefaultSchema("ODA");

        }
    }
}




E:\Usuários\RBV\Downloads\C#\TMFORUM\ODA\Tmf683.PartyInteraction.Infrastructure\Migrations\20250908175021_InitialCreateWithOdaSchema.cs
using System;
using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace Tmf683.PartyInteraction.Infrastructure.Migrations
{
    /// <inheritdoc />
    public partial class InitialCreateWithOdaSchema : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.EnsureSchema(
                name: "ODA");

            migrationBuilder.CreateTable(
                name: "PartyInteractions",
                schema: "ODA",
                columns: table => new
                {
                    Id = table.Column<string>(type: "nvarchar(450)", nullable: false),
                    Href = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    baseType = table.Column<string>(name: "@baseType", type: "nvarchar(max)", nullable: true),
                    type = table.Column<string>(name: "@type", type: "nvarchar(max)", nullable: true),
                    schemaLocation = table.Column<string>(name: "@schemaLocation", type: "nvarchar(max)", nullable: true),
                    Description = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    Reason = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    Status = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    InteractionStartDate = table.Column<DateTime>(type: "datetime2", nullable: true),
                    InteractionEndDate = table.Column<DateTime>(type: "datetime2", nullable: true),
                    CreationDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    LastUpdateDate = table.Column<DateTime>(type: "datetime2", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_PartyInteractions", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "ExternalIdentifiers",
                schema: "ODA",
                columns: table => new
                {
                    Id = table.Column<string>(type: "nvarchar(450)", nullable: false),
                    baseType = table.Column<string>(name: "@baseType", type: "nvarchar(max)", nullable: true),
                    type = table.Column<string>(name: "@type", type: "nvarchar(max)", nullable: true),
                    schemaLocation = table.Column<string>(name: "@schemaLocation", type: "nvarchar(max)", nullable: true),
                    ExternalIdValue = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    ExternalIdType = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    Owner = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    PartyInteractionId = table.Column<string>(type: "nvarchar(450)", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ExternalIdentifiers", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ExternalIdentifiers_PartyInteractions_PartyInteractionId",
                        column: x => x.PartyInteractionId,
                        principalSchema: "ODA",
                        principalTable: "PartyInteractions",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "InteractionItems",
                schema: "ODA",
                columns: table => new
                {
                    Id = table.Column<string>(type: "nvarchar(450)", nullable: false),
                    baseType = table.Column<string>(name: "@baseType", type: "nvarchar(max)", nullable: true),
                    type = table.Column<string>(name: "@type", type: "nvarchar(max)", nullable: true),
                    schemaLocation = table.Column<string>(name: "@schemaLocation", type: "nvarchar(max)", nullable: true),
                    ItemType = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    Description = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    CreationDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    LastUpdateDate = table.Column<DateTime>(type: "datetime2", nullable: true),
                    PartyInteractionId = table.Column<string>(type: "nvarchar(450)", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_InteractionItems", x => x.Id);
                    table.ForeignKey(
                        name: "FK_InteractionItems_PartyInteractions_PartyInteractionId",
                        column: x => x.PartyInteractionId,
                        principalSchema: "ODA",
                        principalTable: "PartyInteractions",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "InteractionRelationships",
                schema: "ODA",
                columns: table => new
                {
                    Id = table.Column<string>(type: "nvarchar(450)", nullable: false),
                    baseType = table.Column<string>(name: "@baseType", type: "nvarchar(max)", nullable: true),
                    type = table.Column<string>(name: "@type", type: "nvarchar(max)", nullable: true),
                    schemaLocation = table.Column<string>(name: "@schemaLocation", type: "nvarchar(max)", nullable: true),
                    referredType = table.Column<string>(name: "@referredType", type: "nvarchar(max)", nullable: true),
                    Href = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    Name = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    RelationshipType = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    TargetInteractionId = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    PartyInteractionId = table.Column<string>(type: "nvarchar(450)", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_InteractionRelationships", x => x.Id);
                    table.ForeignKey(
                        name: "FK_InteractionRelationships_PartyInteractions_PartyInteractionId",
                        column: x => x.PartyInteractionId,
                        principalSchema: "ODA",
                        principalTable: "PartyInteractions",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "RelatedChannels",
                schema: "ODA",
                columns: table => new
                {
                    Id = table.Column<string>(type: "nvarchar(450)", nullable: false),
                    baseType = table.Column<string>(name: "@baseType", type: "nvarchar(max)", nullable: true),
                    type = table.Column<string>(name: "@type", type: "nvarchar(max)", nullable: true),
                    schemaLocation = table.Column<string>(name: "@schemaLocation", type: "nvarchar(max)", nullable: true),
                    referredType = table.Column<string>(name: "@referredType", type: "nvarchar(max)", nullable: true),
                    Href = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    Name = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    Role = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    PartyInteractionId = table.Column<string>(type: "nvarchar(450)", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RelatedChannels", x => x.Id);
                    table.ForeignKey(
                        name: "FK_RelatedChannels_PartyInteractions_PartyInteractionId",
                        column: x => x.PartyInteractionId,
                        principalSchema: "ODA",
                        principalTable: "PartyInteractions",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "Attachments",
                schema: "ODA",
                columns: table => new
                {
                    Id = table.Column<string>(type: "nvarchar(450)", nullable: false),
                    baseType = table.Column<string>(name: "@baseType", type: "nvarchar(max)", nullable: true),
                    type = table.Column<string>(name: "@type", type: "nvarchar(max)", nullable: true),
                    schemaLocation = table.Column<string>(name: "@schemaLocation", type: "nvarchar(max)", nullable: true),
                    referredType = table.Column<string>(name: "@referredType", type: "nvarchar(max)", nullable: true),
                    Href = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    Description = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    Name = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    Url = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    Content = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    MimeType = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    Size = table.Column<long>(type: "bigint", nullable: true),
                    ValidForStart = table.Column<DateTime>(type: "datetime2", nullable: true),
                    ValidForEnd = table.Column<DateTime>(type: "datetime2", nullable: true),
                    PartyInteractionId = table.Column<string>(type: "nvarchar(450)", nullable: false),
                    InteractionItemId = table.Column<string>(type: "nvarchar(450)", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Attachments", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Attachments_InteractionItems_InteractionItemId",
                        column: x => x.InteractionItemId,
                        principalSchema: "ODA",
                        principalTable: "InteractionItems",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_Attachments_PartyInteractions_PartyInteractionId",
                        column: x => x.PartyInteractionId,
                        principalSchema: "ODA",
                        principalTable: "PartyInteractions",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "Notes",
                schema: "ODA",
                columns: table => new
                {
                    Id = table.Column<string>(type: "nvarchar(450)", nullable: false),
                    baseType = table.Column<string>(name: "@baseType", type: "nvarchar(max)", nullable: true),
                    type = table.Column<string>(name: "@type", type: "nvarchar(max)", nullable: true),
                    schemaLocation = table.Column<string>(name: "@schemaLocation", type: "nvarchar(max)", nullable: true),
                    Author = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    Date = table.Column<DateTime>(type: "datetime2", nullable: false),
                    Text = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    PartyInteractionId = table.Column<string>(type: "nvarchar(450)", nullable: true),
                    InteractionItemId = table.Column<string>(type: "nvarchar(450)", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Notes", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Notes_InteractionItems_InteractionItemId",
                        column: x => x.InteractionItemId,
                        principalSchema: "ODA",
                        principalTable: "InteractionItems",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_Notes_PartyInteractions_PartyInteractionId",
                        column: x => x.PartyInteractionId,
                        principalSchema: "ODA",
                        principalTable: "PartyInteractions",
                        principalColumn: "Id");
                });

            migrationBuilder.CreateTable(
                name: "RelatedParties",
                schema: "ODA",
                columns: table => new
                {
                    Id = table.Column<string>(type: "nvarchar(450)", nullable: false),
                    baseType = table.Column<string>(name: "@baseType", type: "nvarchar(max)", nullable: true),
                    type = table.Column<string>(name: "@type", type: "nvarchar(max)", nullable: true),
                    schemaLocation = table.Column<string>(name: "@schemaLocation", type: "nvarchar(max)", nullable: true),
                    referredType = table.Column<string>(name: "@referredType", type: "nvarchar(max)", nullable: true),
                    Href = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    Name = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    Role = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    PartyInteractionId = table.Column<string>(type: "nvarchar(450)", nullable: false),
                    InteractionItemId = table.Column<string>(type: "nvarchar(450)", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RelatedParties", x => x.Id);
                    table.ForeignKey(
                        name: "FK_RelatedParties_InteractionItems_InteractionItemId",
                        column: x => x.InteractionItemId,
                        principalSchema: "ODA",
                        principalTable: "InteractionItems",
                        principalColumn: "Id");
                    table.ForeignKey(
                        name: "FK_RelatedParties_PartyInteractions_PartyInteractionId",
                        column: x => x.PartyInteractionId,
                        principalSchema: "ODA",
                        principalTable: "PartyInteractions",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateIndex(
                name: "IX_Attachments_InteractionItemId",
                schema: "ODA",
                table: "Attachments",
                column: "InteractionItemId");

            migrationBuilder.CreateIndex(
                name: "IX_Attachments_PartyInteractionId",
                schema: "ODA",
                table: "Attachments",
                column: "PartyInteractionId");

            migrationBuilder.CreateIndex(
                name: "IX_ExternalIdentifiers_PartyInteractionId",
                schema: "ODA",
                table: "ExternalIdentifiers",
                column: "PartyInteractionId");

            migrationBuilder.CreateIndex(
                name: "IX_InteractionItems_PartyInteractionId",
                schema: "ODA",
                table: "InteractionItems",
                column: "PartyInteractionId");

            migrationBuilder.CreateIndex(
                name: "IX_InteractionRelationships_PartyInteractionId",
                schema: "ODA",
                table: "InteractionRelationships",
                column: "PartyInteractionId");

            migrationBuilder.CreateIndex(
                name: "IX_Notes_InteractionItemId",
                schema: "ODA",
                table: "Notes",
                column: "InteractionItemId");

            migrationBuilder.CreateIndex(
                name: "IX_Notes_PartyInteractionId",
                schema: "ODA",
                table: "Notes",
                column: "PartyInteractionId");

            migrationBuilder.CreateIndex(
                name: "IX_RelatedChannels_PartyInteractionId",
                schema: "ODA",
                table: "RelatedChannels",
                column: "PartyInteractionId");

            migrationBuilder.CreateIndex(
                name: "IX_RelatedParties_InteractionItemId",
                schema: "ODA",
                table: "RelatedParties",
                column: "InteractionItemId");

            migrationBuilder.CreateIndex(
                name: "IX_RelatedParties_PartyInteractionId",
                schema: "ODA",
                table: "RelatedParties",
                column: "PartyInteractionId");
        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropTable(
                name: "Attachments",
                schema: "ODA");

            migrationBuilder.DropTable(
                name: "ExternalIdentifiers",
                schema: "ODA");

            migrationBuilder.DropTable(
                name: "InteractionRelationships",
                schema: "ODA");

            migrationBuilder.DropTable(
                name: "Notes",
                schema: "ODA");

            migrationBuilder.DropTable(
                name: "RelatedChannels",
                schema: "ODA");

            migrationBuilder.DropTable(
                name: "RelatedParties",
                schema: "ODA");

            migrationBuilder.DropTable(
                name: "InteractionItems",
                schema: "ODA");

            migrationBuilder.DropTable(
                name: "PartyInteractions",
                schema: "ODA");
        }
    }
}


E:\Usuários\RBV\Downloads\C#\TMFORUM\ODA\Tmf683.PartyInteraction.Infrastructure\Migrations\20250908175021_InitialCreateWithOdaSchema.Designer.cs
// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Tmf683.PartyInteraction.Infrastructure.Data;

#nullable disable

namespace Tmf683.PartyInteraction.Infrastructure.Migrations
{
    [DbContext(typeof(PartyInteractionDbContext))]
    [Migration("20250908175021_InitialCreateWithOdaSchema")]
    partial class InitialCreateWithOdaSchema
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("ODA")
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Tmf683.PartyInteraction.Domain.Entities.AttachmentRefOrValue", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BaseType")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("@baseType");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Href")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InteractionItemId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MimeType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PartyInteractionId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ReferredType")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("@referredType");

                    b.Property<string>("SchemaLocation")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("@schemaLocation");

                    b.Property<long?>("Size")
                        .HasColumnType("bigint");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("@type");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ValidForEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ValidForStart")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("InteractionItemId");

                    b.HasIndex("PartyInteractionId");

                    b.ToTable("Attachments", "ODA");
                });

            modelBuilder.Entity("Tmf683.PartyInteraction.Domain.Entities.ExternalIdentifier", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BaseType")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("@baseType");

                    b.Property<string>("ExternalIdType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExternalIdValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Owner")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PartyInteractionId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SchemaLocation")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("@schemaLocation");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("@type");

                    b.HasKey("Id");

                    b.HasIndex("PartyInteractionId");

                    b.ToTable("ExternalIdentifiers", "ODA");
                });

            modelBuilder.Entity("Tmf683.PartyInteraction.Domain.Entities.InteractionItem", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BaseType")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("@baseType");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ItemType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PartyInteractionId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SchemaLocation")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("@schemaLocation");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("@type");

                    b.HasKey("Id");

                    b.HasIndex("PartyInteractionId");

                    b.ToTable("InteractionItems", "ODA");
                });

            modelBuilder.Entity("Tmf683.PartyInteraction.Domain.Entities.InteractionRelationship", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BaseType")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("@baseType");

                    b.Property<string>("Href")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PartyInteractionId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ReferredType")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("@referredType");

                    b.Property<string>("RelationshipType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SchemaLocation")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("@schemaLocation");

                    b.Property<string>("TargetInteractionId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("@type");

                    b.HasKey("Id");

                    b.HasIndex("PartyInteractionId");

                    b.ToTable("InteractionRelationships", "ODA");
                });

            modelBuilder.Entity("Tmf683.PartyInteraction.Domain.Entities.Note", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Author")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BaseType")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("@baseType");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("InteractionItemId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PartyInteractionId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SchemaLocation")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("@schemaLocation");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("@type");

                    b.HasKey("Id");

                    b.HasIndex("InteractionItemId");

                    b.HasIndex("PartyInteractionId");

                    b.ToTable("Notes", "ODA");
                });

            modelBuilder.Entity("Tmf683.PartyInteraction.Domain.Entities.PartyInteraction", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BaseType")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("@baseType");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Href")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("InteractionEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("InteractionStartDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastUpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SchemaLocation")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("@schemaLocation");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("@type");

                    b.HasKey("Id");

                    b.ToTable("PartyInteractions", "ODA");
                });

            modelBuilder.Entity("Tmf683.PartyInteraction.Domain.Entities.RelatedChannel", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BaseType")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("@baseType");

                    b.Property<string>("Href")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PartyInteractionId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ReferredType")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("@referredType");

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SchemaLocation")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("@schemaLocation");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("@type");

                    b.HasKey("Id");

                    b.HasIndex("PartyInteractionId");

                    b.ToTable("RelatedChannels", "ODA");
                });

            modelBuilder.Entity("Tmf683.PartyInteraction.Domain.Entities.RelatedPartyOrPartyRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BaseType")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("@baseType");

                    b.Property<string>("Href")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InteractionItemId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PartyInteractionId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ReferredType")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("@referredType");

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SchemaLocation")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("@schemaLocation");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("@type");

                    b.HasKey("Id");

                    b.HasIndex("InteractionItemId");

                    b.HasIndex("PartyInteractionId");

                    b.ToTable("RelatedParties", "ODA");
                });

            modelBuilder.Entity("Tmf683.PartyInteraction.Domain.Entities.AttachmentRefOrValue", b =>
                {
                    b.HasOne("Tmf683.PartyInteraction.Domain.Entities.InteractionItem", "InteractionItem")
                        .WithMany("Attachment")
                        .HasForeignKey("InteractionItemId");

                    b.HasOne("Tmf683.PartyInteraction.Domain.Entities.PartyInteraction", "PartyInteraction")
                        .WithMany("Attachment")
                        .HasForeignKey("PartyInteractionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InteractionItem");

                    b.Navigation("PartyInteraction");
                });

            modelBuilder.Entity("Tmf683.PartyInteraction.Domain.Entities.ExternalIdentifier", b =>
                {
                    b.HasOne("Tmf683.PartyInteraction.Domain.Entities.PartyInteraction", "PartyInteraction")
                        .WithMany("ExternalIdentifier")
                        .HasForeignKey("PartyInteractionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PartyInteraction");
                });

            modelBuilder.Entity("Tmf683.PartyInteraction.Domain.Entities.InteractionItem", b =>
                {
                    b.HasOne("Tmf683.PartyInteraction.Domain.Entities.PartyInteraction", "PartyInteraction")
                        .WithMany("InteractionItem")
                        .HasForeignKey("PartyInteractionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PartyInteraction");
                });

            modelBuilder.Entity("Tmf683.PartyInteraction.Domain.Entities.InteractionRelationship", b =>
                {
                    b.HasOne("Tmf683.PartyInteraction.Domain.Entities.PartyInteraction", "PartyInteraction")
                        .WithMany("InteractionRelationship")
                        .HasForeignKey("PartyInteractionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PartyInteraction");
                });

            modelBuilder.Entity("Tmf683.PartyInteraction.Domain.Entities.Note", b =>
                {
                    b.HasOne("Tmf683.PartyInteraction.Domain.Entities.InteractionItem", "InteractionItem")
                        .WithMany("Note")
                        .HasForeignKey("InteractionItemId");

                    b.HasOne("Tmf683.PartyInteraction.Domain.Entities.PartyInteraction", "PartyInteraction")
                        .WithMany("Note")
                        .HasForeignKey("PartyInteractionId");

                    b.Navigation("InteractionItem");

                    b.Navigation("PartyInteraction");
                });

            modelBuilder.Entity("Tmf683.PartyInteraction.Domain.Entities.RelatedChannel", b =>
                {
                    b.HasOne("Tmf683.PartyInteraction.Domain.Entities.PartyInteraction", "PartyInteraction")
                        .WithMany("RelatedChannel")
                        .HasForeignKey("PartyInteractionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PartyInteraction");
                });

            modelBuilder.Entity("Tmf683.PartyInteraction.Domain.Entities.RelatedPartyOrPartyRole", b =>
                {
                    b.HasOne("Tmf683.PartyInteraction.Domain.Entities.InteractionItem", "InteractionItem")
                        .WithMany("RelatedParty")
                        .HasForeignKey("InteractionItemId");

                    b.HasOne("Tmf683.PartyInteraction.Domain.Entities.PartyInteraction", "PartyInteraction")
                        .WithMany("RelatedParty")
                        .HasForeignKey("PartyInteractionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InteractionItem");

                    b.Navigation("PartyInteraction");
                });

            modelBuilder.Entity("Tmf683.PartyInteraction.Domain.Entities.InteractionItem", b =>
                {
                    b.Navigation("Attachment");

                    b.Navigation("Note");

                    b.Navigation("RelatedParty");
                });

            modelBuilder.Entity("Tmf683.PartyInteraction.Domain.Entities.PartyInteraction", b =>
                {
                    b.Navigation("Attachment");

                    b.Navigation("ExternalIdentifier");

                    b.Navigation("InteractionItem");

                    b.Navigation("InteractionRelationship");

                    b.Navigation("Note");

                    b.Navigation("RelatedChannel");

                    b.Navigation("RelatedParty");
                });
#pragma warning restore 612, 618
        }
    }
}


E:\Usuários\RBV\Downloads\C#\TMFORUM\ODA\Tmf683.PartyInteraction.Infrastructure\Migrations\PartyInteractionDbContextModelSnapshot.cs
// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Tmf683.PartyInteraction.Infrastructure.Data;

#nullable disable

namespace Tmf683.PartyInteraction.Infrastructure.Migrations
{
    [DbContext(typeof(PartyInteractionDbContext))]
    partial class PartyInteractionDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("ODA")
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Tmf683.PartyInteraction.Domain.Entities.AttachmentRefOrValue", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BaseType")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("@baseType");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Href")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InteractionItemId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MimeType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PartyInteractionId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ReferredType")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("@referredType");

                    b.Property<string>("SchemaLocation")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("@schemaLocation");

                    b.Property<long?>("Size")
                        .HasColumnType("bigint");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("@type");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ValidForEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ValidForStart")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("InteractionItemId");

                    b.HasIndex("PartyInteractionId");

                    b.ToTable("Attachments", "ODA");
                });

            modelBuilder.Entity("Tmf683.PartyInteraction.Domain.Entities.ExternalIdentifier", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BaseType")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("@baseType");

                    b.Property<string>("ExternalIdType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExternalIdValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Owner")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PartyInteractionId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SchemaLocation")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("@schemaLocation");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("@type");

                    b.HasKey("Id");

                    b.HasIndex("PartyInteractionId");

                    b.ToTable("ExternalIdentifiers", "ODA");
                });

            modelBuilder.Entity("Tmf683.PartyInteraction.Domain.Entities.InteractionItem", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BaseType")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("@baseType");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ItemType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PartyInteractionId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SchemaLocation")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("@schemaLocation");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("@type");

                    b.HasKey("Id");

                    b.HasIndex("PartyInteractionId");

                    b.ToTable("InteractionItems", "ODA");
                });

            modelBuilder.Entity("Tmf683.PartyInteraction.Domain.Entities.InteractionRelationship", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BaseType")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("@baseType");

                    b.Property<string>("Href")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PartyInteractionId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ReferredType")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("@referredType");

                    b.Property<string>("RelationshipType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SchemaLocation")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("@schemaLocation");

                    b.Property<string>("TargetInteractionId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("@type");

                    b.HasKey("Id");

                    b.HasIndex("PartyInteractionId");

                    b.ToTable("InteractionRelationships", "ODA");
                });

            modelBuilder.Entity("Tmf683.PartyInteraction.Domain.Entities.Note", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Author")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BaseType")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("@baseType");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("InteractionItemId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PartyInteractionId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SchemaLocation")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("@schemaLocation");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("@type");

                    b.HasKey("Id");

                    b.HasIndex("InteractionItemId");

                    b.HasIndex("PartyInteractionId");

                    b.ToTable("Notes", "ODA");
                });

            modelBuilder.Entity("Tmf683.PartyInteraction.Domain.Entities.PartyInteraction", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BaseType")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("@baseType");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Href")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("InteractionEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("InteractionStartDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastUpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SchemaLocation")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("@schemaLocation");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("@type");

                    b.HasKey("Id");

                    b.ToTable("PartyInteractions", "ODA");
                });

            modelBuilder.Entity("Tmf683.PartyInteraction.Domain.Entities.RelatedChannel", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BaseType")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("@baseType");

                    b.Property<string>("Href")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PartyInteractionId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ReferredType")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("@referredType");

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SchemaLocation")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("@schemaLocation");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("@type");

                    b.HasKey("Id");

                    b.HasIndex("PartyInteractionId");

                    b.ToTable("RelatedChannels", "ODA");
                });

            modelBuilder.Entity("Tmf683.PartyInteraction.Domain.Entities.RelatedPartyOrPartyRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BaseType")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("@baseType");

                    b.Property<string>("Href")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InteractionItemId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PartyInteractionId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ReferredType")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("@referredType");

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SchemaLocation")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("@schemaLocation");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("@type");

                    b.HasKey("Id");

                    b.HasIndex("InteractionItemId");

                    b.HasIndex("PartyInteractionId");

                    b.ToTable("RelatedParties", "ODA");
                });

            modelBuilder.Entity("Tmf683.PartyInteraction.Domain.Entities.AttachmentRefOrValue", b =>
                {
                    b.HasOne("Tmf683.PartyInteraction.Domain.Entities.InteractionItem", "InteractionItem")
                        .WithMany("Attachment")
                        .HasForeignKey("InteractionItemId");

                    b.HasOne("Tmf683.PartyInteraction.Domain.Entities.PartyInteraction", "PartyInteraction")
                        .WithMany("Attachment")
                        .HasForeignKey("PartyInteractionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InteractionItem");

                    b.Navigation("PartyInteraction");
                });

            modelBuilder.Entity("Tmf683.PartyInteraction.Domain.Entities.ExternalIdentifier", b =>
                {
                    b.HasOne("Tmf683.PartyInteraction.Domain.Entities.PartyInteraction", "PartyInteraction")
                        .WithMany("ExternalIdentifier")
                        .HasForeignKey("PartyInteractionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PartyInteraction");
                });

            modelBuilder.Entity("Tmf683.PartyInteraction.Domain.Entities.InteractionItem", b =>
                {
                    b.HasOne("Tmf683.PartyInteraction.Domain.Entities.PartyInteraction", "PartyInteraction")
                        .WithMany("InteractionItem")
                        .HasForeignKey("PartyInteractionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PartyInteraction");
                });

            modelBuilder.Entity("Tmf683.PartyInteraction.Domain.Entities.InteractionRelationship", b =>
                {
                    b.HasOne("Tmf683.PartyInteraction.Domain.Entities.PartyInteraction", "PartyInteraction")
                        .WithMany("InteractionRelationship")
                        .HasForeignKey("PartyInteractionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PartyInteraction");
                });

            modelBuilder.Entity("Tmf683.PartyInteraction.Domain.Entities.Note", b =>
                {
                    b.HasOne("Tmf683.PartyInteraction.Domain.Entities.InteractionItem", "InteractionItem")
                        .WithMany("Note")
                        .HasForeignKey("InteractionItemId");

                    b.HasOne("Tmf683.PartyInteraction.Domain.Entities.PartyInteraction", "PartyInteraction")
                        .WithMany("Note")
                        .HasForeignKey("PartyInteractionId");

                    b.Navigation("InteractionItem");

                    b.Navigation("PartyInteraction");
                });

            modelBuilder.Entity("Tmf683.PartyInteraction.Domain.Entities.RelatedChannel", b =>
                {
                    b.HasOne("Tmf683.PartyInteraction.Domain.Entities.PartyInteraction", "PartyInteraction")
                        .WithMany("RelatedChannel")
                        .HasForeignKey("PartyInteractionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PartyInteraction");
                });

            modelBuilder.Entity("Tmf683.PartyInteraction.Domain.Entities.RelatedPartyOrPartyRole", b =>
                {
                    b.HasOne("Tmf683.PartyInteraction.Domain.Entities.InteractionItem", "InteractionItem")
                        .WithMany("RelatedParty")
                        .HasForeignKey("InteractionItemId");

                    b.HasOne("Tmf683.PartyInteraction.Domain.Entities.PartyInteraction", "PartyInteraction")
                        .WithMany("RelatedParty")
                        .HasForeignKey("PartyInteractionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InteractionItem");

                    b.Navigation("PartyInteraction");
                });

            modelBuilder.Entity("Tmf683.PartyInteraction.Domain.Entities.InteractionItem", b =>
                {
                    b.Navigation("Attachment");

                    b.Navigation("Note");

                    b.Navigation("RelatedParty");
                });

            modelBuilder.Entity("Tmf683.PartyInteraction.Domain.Entities.PartyInteraction", b =>
                {
                    b.Navigation("Attachment");

                    b.Navigation("ExternalIdentifier");

                    b.Navigation("InteractionItem");

                    b.Navigation("InteractionRelationship");

                    b.Navigation("Note");

                    b.Navigation("RelatedChannel");

                    b.Navigation("RelatedParty");
                });
#pragma warning restore 612, 618
        }
    }
}


E:\Usuários\RBV\Downloads\C#\TMFORUM\ODA\Tmf683.PartyInteraction.Infrastructure\Repositories\PartyInteractionRepository.cs
using Microsoft.EntityFrameworkCore;
using Tmf683.PartyInteraction.Application.Repositories;
using Tmf683.PartyInteraction.Domain.Entities;
using Tmf683.PartyInteraction.Infrastructure.Data;

namespace Tmf683.PartyInteraction.Infrastructure.Repositories
{
    public class PartyInteractionRepository : IPartyInteractionRepository
    {
        private readonly PartyInteractionDbContext _context;

        public PartyInteractionRepository(PartyInteractionDbContext context)
        {
            _context = context;
        }

        //GET All Interactions
        public async Task<IEnumerable<Domain.Entities.PartyInteraction>> GetAllPartyInteractionsAsync()
        {
            return await _context.PartyInteractions.Include(pi => pi.RelatedParty).ToListAsync();
        }


        //Busca uma interação de party pelo ID, incluindo a entidade RelatedParty
        public async Task<Domain.Entities.PartyInteraction?> GetPartyInteractionByIdAsync(string id)
        {
            return await _context.PartyInteractions.Include(pi => pi.RelatedParty).FirstOrDefaultAsync(pi => pi.Id == id);
        }

        //UPDATE
        public async Task UpdatePartyInteractionAsync(Domain.Entities.PartyInteraction entity)
        {
            _context.PartyInteractions.Update(entity);
            await _context.SaveChangesAsync();
        }

        //Remove as entradas em RelatedPartyRef que é uma lista dentro de PartyInteract
        //PartyInteract é o que registra a interação, RelatedPartyRef são todas as partes envolvidas na interação
        public async Task RemovePartyInteractionAsync(RelatedPartyOrPartyRole entity)
        {
            _context.RelatedParties.Remove(entity);
            await _context.SaveChangesAsync();

        }

        //Apenas para salvar as modificações
        public async Task SaveChangesAsync()
        {
            await _context.SaveChangesAsync();
        }


    }

}


E:\Usuários\RBV\Downloads\C#\TMFORUM\ODA\Tmf632.PartyManagement.Api\Models\Dtos\CharacteristicDto.cs
using Microsoft.AspNetCore.Mvc.ModelBinding.Validation;
using System.ComponentModel.DataAnnotations;

//Importante lembrar que nas classes DTOs vc não precisa das propriedades de navegação de retorno como nas classes originais
namespace Tmf632.PartyManagement.Api.Models.Dtos
{
    // Classe para características estendidas (atributos personalizados)
    public class CharacteristicDto
    {
        [Key]
        [ValidateNever]
        public string Id { get; set; } = Guid.NewGuid().ToString();
        public string Name { get; set; }
        public string Value { get; set; }

        // Foreign key for the parent Individual entity
        public string? IndividualId { get; set; }



        // Foreign key for the parent Organization entity
        public string? OrganizationId { get; set; }

    }

}


E:\Usuários\RBV\Downloads\C#\TMFORUM\ODA\Tmf632.PartyManagement.Api\Models\Dtos\ContactMediumDto.cs
using Microsoft.AspNetCore.Mvc.ModelBinding.Validation;
using System.ComponentModel.DataAnnotations;

//Importante lembrar que nas classes DTOs vc não precisa das propriedades de navegação de retorno como nas classes originais
namespace Tmf632.PartyManagement.Api.Models.Dtos
{
    // Classe para informações de contato (ex: email, telefone)
    public class ContactMediumDto
    {
        [Key]
        [ValidateNever]
        public string Id { get; set; } = Guid.NewGuid().ToString();
        public string MediumType { get; set; }
        public bool Preferred { get; set; }
        public string Value { get; set; }

        // Foreign key for the parent Individual entity
        public string? IndividualId { get; set; }



        // Foreign key for the parent Organization entity
        public string? OrganizationId { get; set; }


    }


}


E:\Usuários\RBV\Downloads\C#\TMFORUM\ODA\Tmf632.PartyManagement.Api\Models\Dtos\IndividualDto.cs
using Microsoft.AspNetCore.Mvc.ModelBinding.Validation;
using System.ComponentModel.DataAnnotations;
using System.Reflection.PortableExecutable;
using System.Text.Json.Serialization;

namespace Tmf632.PartyManagement.Api.Models.Dtos
{
    public class IndividualDto
    {

        // A anotação [Key] define esta propriedade como a chave primária
        // do banco de dados.
        [Key]
        [ValidateNever]
        public string Id { get; set; } 

        // Propriedades para dados pessoais básicos
        [Required]
        public string FamilyName { get; set; }
        [Required]
        public string GivenName { get; set; }
        [Required]
        public string FullName { get; set; }

        // Propriedades para contato e endereço
        [Required]
        public string Gender { get; set; }
        [Required]
        public string Nationality { get; set; }
        public DateTime? BirthDate { get; set; }

        // Coleções para relacionamentos com outras entidades
        // O Entity Framework Core irá mapear estas coleções automaticamente.
        public List<ContactMediumDto> ContactMedium { get; set; } = new();
        public List<RelatedPartyDto> RelatedParty { get; set; } = new();
        public List<CharacteristicDto> Characteristic { get; set; } = new();

    }
}


E:\Usuários\RBV\Downloads\C#\TMFORUM\ODA\Tmf632.PartyManagement.Api\Models\Dtos\OrganizationDto.cs
using Microsoft.AspNetCore.Mvc.ModelBinding.Validation;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;

namespace Tmf632.PartyManagement.Api.Models.Dtos
{
    public class OrganizationDto
    {
        // A anotação [Key] define esta propriedade como a chave primária.
        [Key]
        [ValidateNever]
        public string Id { get; set; }

        // Propriedades para dados da organização.
        [Required]
        public string Name { get; set; }
        [Required]
        public string TradingName { get; set; }
        public DateTime? StartDate { get; set; }
        public DateTime? EndDate { get; set; }

        public bool IsHeadOffice { get; set; }

        // Coleções para relacionamentos com outras entidades, seguindo o padrão
        // que usamos para a classe Individual.
        public List<ContactMediumDto> ContactMedium { get; set; } = new();
        public List<RelatedPartyDto> RelatedParty { get; set; } = new();
        public List<CharacteristicDto> Characteristic { get; set; } = new();

    }
}



E:\Usuários\RBV\Downloads\C#\TMFORUM\ODA\Tmf632.PartyManagement.Api\Models\Dtos\RelatedPartyDto.cs
using Microsoft.AspNetCore.Mvc.ModelBinding.Validation;
using System.ComponentModel.DataAnnotations;

//Importante lembrar que nas classes DTOs vc não precisa das propriedades de navegação de retorno como nas classes originais

namespace Tmf632.PartyManagement.Api.Models.Dtos
{
    // Classe para relacionamentos com outras entidades ou partes
    public class RelatedPartyDto
    {
        [Key]
        [ValidateNever]
        public string Id { get; set; } = Guid.NewGuid().ToString();
        public string PartyId { get; set; }
        public string Role { get; set; }
        public string RelationshipType { get; set; }

        // Foreign key for the parent Individual entity
        public string? IndividualId { get; set; }



        // Foreign key for the parent Organization entity
        public string? OrganizationId { get; set; }


    }
}


E:\Usuários\RBV\Downloads\C#\TMFORUM\ODA\Tmf683.PartyInteraction.Application\Models\APIs\Tmf632ApiConfiguration.cs
namespace Tmf683.PartyInteraction.Application.Models.APIs
{
    public class Tmf632ApiConfiguration
    {
        public string BaseUrl { get; set; }
        public string GetIndividualEndpoint { get; set; }
    }
}


E:\Usuários\RBV\Downloads\C#\TMFORUM\ODA\Tmf683.PartyInteraction.Application\Models\Dtos\AttachmentRefOrValueDto.cs
using System.Text.Json.Serialization;

namespace Tmf683.PartyInteraction.Application.Models.Dtos
{
    public class AttachmentRefOrValueDto
    {
        [JsonPropertyName("id")]
        public string Id { get; set; }

        [JsonPropertyName("href")]
        public string? Href { get; set; }

        [JsonPropertyName("description")]
        public string? Description { get; set; }

        [JsonPropertyName("name")]
        public string? Name { get; set; }

        [JsonPropertyName("url")]
        public string? Url { get; set; }

        [JsonPropertyName("content")]
        public string? Content { get; set; }

        [JsonPropertyName("mimeType")]
        public string? MimeType { get; set; }

        [JsonPropertyName("size")]
        public long? Size { get; set; }

        [JsonPropertyName("validFor")]
        public TimePeriodDto? ValidFor { get; set; }

        [JsonPropertyName("@baseType")]
        public string? BaseType { get; set; }

        [JsonPropertyName("@type")]
        public string? Type { get; set; } // Discriminador: "Attachment" ou "AttachmentRef"

        [JsonPropertyName("@schemaLocation")]
        public string? SchemaLocation { get; set; }

        [JsonPropertyName("@referredType")]
        public string? ReferredType { get; set; }
    }

    // DTO auxiliar para o período de validade
    public class TimePeriodDto
    {
        [JsonPropertyName("startDateTime")]
        public DateTime? StartDateTime { get; set; }

        [JsonPropertyName("endDateTime")]
        public DateTime? EndDateTime { get; set; }
    }
}


E:\Usuários\RBV\Downloads\C#\TMFORUM\ODA\Tmf683.PartyInteraction.Application\Models\Dtos\ExternalIdentifierDto.cs
using System.Text.Json.Serialization;

namespace Tmf683.PartyInteraction.Application.Models.Dtos
{
    public class ExternalIdentifierDto
    {
        [JsonPropertyName("id")]
        public string ExternalIdValue { get; set; } // O ID no sistema externo

        [JsonPropertyName("externalIdentifierType")]
        public string? ExternalIdType { get; set; } // O tipo de ID

        [JsonPropertyName("owner")]
        public string? Owner { get; set; } // O sistema dono do ID

        [JsonPropertyName("@baseType")]
        public string? BaseType { get; set; }

        [JsonPropertyName("@type")]
        public string? Type { get; set; }

        [JsonPropertyName("@schemaLocation")]
        public string? SchemaLocation { get; set; }
    }
}

E:\Usuários\RBV\Downloads\C#\TMFORUM\ODA\Tmf683.PartyInteraction.Application\Models\Dtos\InteractionItemDto.cs
using System.Text.Json.Serialization;

namespace Tmf683.PartyInteraction.Application.Models.Dtos
{
    public class InteractionItemDto
    {
        [JsonPropertyName("id")]
        public string Id { get; set; }

        [JsonPropertyName("itemType")]
        public string? ItemType { get; set; }

        [JsonPropertyName("description")]
        public string? Description { get; set; }

        [JsonPropertyName("creationDate")]
        public DateTime CreationDate { get; set; }

        [JsonPropertyName("lastUpdate")]
        public DateTime? LastUpdate { get; set; }

        [JsonPropertyName("@baseType")]
        public string? BaseType { get; set; }

        [JsonPropertyName("@type")]
        public string? Type { get; set; }

        [JsonPropertyName("@schemaLocation")]
        public string? SchemaLocation { get; set; }

        // --- Relacionamentos do próprio Item ---
        [JsonPropertyName("note")]
        public List<NoteDto>? Note { get; set; }

        [JsonPropertyName("attachment")]
        public List<AttachmentRefOrValueDto>? Attachment { get; set; }

        [JsonPropertyName("relatedParty")]
        public List<RelatedPartyOrPartyRoleDto>? RelatedParty { get; set; }
    }
}


E:\Usuários\RBV\Downloads\C#\TMFORUM\ODA\Tmf683.PartyInteraction.Application\Models\Dtos\InteractionRelationshipDto.cs
using System.Text.Json.Serialization;

namespace Tmf683.PartyInteraction.Application.Models.Dtos
{
    public class InteractionRelationshipDto
    {
        [JsonPropertyName("id")]
        public string TargetInteractionId { get; set; } // ID da outra interação

        [JsonPropertyName("href")]
        public string? Href { get; set; }

        [JsonPropertyName("name")]
        public string? Name { get; set; }

        [JsonPropertyName("relationshipType")]
        public string? RelationshipType { get; set; }

        [JsonPropertyName("@baseType")]
        public string? BaseType { get; set; }

        [JsonPropertyName("@type")]
        public string? Type { get; set; }

        [JsonPropertyName("@schemaLocation")]
        public string? SchemaLocation { get; set; }

        [JsonPropertyName("@referredType")]
        public string? ReferredType { get; set; }
    }
}

E:\Usuários\RBV\Downloads\C#\TMFORUM\ODA\Tmf683.PartyInteraction.Application\Models\Dtos\NoteDto.cs
using System.Text.Json.Serialization;

namespace Tmf683.PartyInteraction.Application.Models.Dtos
{
    public class NoteDto
    {
        [JsonPropertyName("id")]
        public string Id { get; set; }

        [JsonPropertyName("author")]
        public string? Author { get; set; }

        [JsonPropertyName("date")]
        public DateTime Date { get; set; }

        [JsonPropertyName("text")]
        public string? Text { get; set; }

        [JsonPropertyName("@baseType")]
        public string? BaseType { get; set; }

        [JsonPropertyName("@type")]
        public string? Type { get; set; }

        [JsonPropertyName("@schemaLocation")]
        public string? SchemaLocation { get; set; }
    }
}


E:\Usuários\RBV\Downloads\C#\TMFORUM\ODA\Tmf683.PartyInteraction.Application\Models\Dtos\PartyInteractionDto.cs
using System.ComponentModel.DataAnnotations;

namespace Tmf683.PartyInteraction.Application.Models.Dtos
{
    public class PartyInteractionDto
    {
        [Key]
        public string Id { get; set; } = Guid.NewGuid().ToString();
        public string InteractionType { get; set; } = string.Empty;
        public string Description { get; set; } = string.Empty;
        public DateTime CreationDate { get; set; }
        public string Channel { get; set; } = string.Empty;
        public string Status { get; set; } = string.Empty;
        public List<RelatedPartyOrPartyRoleDto> RelatedParty { get; set; }

        // ✅ Nova propriedade para remoção explícita
        public List<string> RelatedPartyToRemove { get; set; }

        public DateTime? LastUpdateDate { get; set; }

    }
}


E:\Usuários\RBV\Downloads\C#\TMFORUM\ODA\Tmf683.PartyInteraction.Application\Models\Dtos\RelatedChannelDto.cs
using System.Text.Json.Serialization;

namespace Tmf683.PartyInteraction.Application.Models.Dtos
{
    public class RelatedChannelDto
    {
        [JsonPropertyName("id")]
        public string Id { get; set; }

        [JsonPropertyName("href")]
        public string? Href { get; set; }

        [JsonPropertyName("name")]
        public string? Name { get; set; }

        [JsonPropertyName("role")]
        public string? Role { get; set; }

        [JsonPropertyName("@baseType")]
        public string? BaseType { get; set; }

        [JsonPropertyName("@type")]
        public string? Type { get; set; }

        [JsonPropertyName("@schemaLocation")]
        public string? SchemaLocation { get; set; }

        [JsonPropertyName("@referredType")]
        public string? ReferredType { get; set; }
    }
}

E:\Usuários\RBV\Downloads\C#\TMFORUM\ODA\Tmf683.PartyInteraction.Application\Models\Dtos\RelatedPartyOrPartyRoleDto.cs
using System.Text.Json.Serialization;

namespace Tmf683.PartyInteraction.Application.Models.Dtos
{
    public class RelatedPartyOrPartyRoleDto
    {
        [JsonPropertyName("id")]
        public string Id { get; set; } // ID da Party ou PartyRole referenciada

        [JsonPropertyName("href")]
        public string? Href { get; set; }

        [JsonPropertyName("name")]
        public string? Name { get; set; }

        [JsonPropertyName("role")]
        public string Role { get; set; } // O papel nesta interação

        [JsonPropertyName("@baseType")]
        public string? BaseType { get; set; }

        [JsonPropertyName("@type")]
        public string? Type { get; set; }

        [JsonPropertyName("@schemaLocation")]
        public string? SchemaLocation { get; set; }

        [JsonPropertyName("@referredType")]
        public string? ReferredType { get; set; } // Discriminador: "Party" ou "PartyRole"
    }
}

E:\Usuários\RBV\Downloads\C#\TMFORUM\ODA\Tmf683.PartyInteraction.Application\Services\Interfaces\IPartyInteractionService.cs

using Microsoft.AspNetCore.Mvc;
using Tmf683.PartyInteraction.Application.Models.Dtos.Requests;
using Tmf683.PartyInteraction.Application.Models.Dtos.Responses;

namespace Tmf683.PartyInteraction.Application.Services.Interfaces
{
    public interface IPartyInteractionService
    {
        //MÉTODOS DE CRUD
        //PATCH
        Task<IActionResult> PatchPartyInteractionAsync(string id, PartyInteractionUpdateDto dto);
        //GET ALL
        Task<IEnumerable<PartyInteractionResponseDto>> GetAllPartyInteractionsAsync();
        //GET by ID
        Task<PartyInteractionResponseDto?> GetPartyInteractionByIdAsync(string id);
        //UPDATE
        Task<bool> UpdatePartyInteractionAsync(string id, PartyInteractionUpdateDto dto);
    }
}


E:\Usuários\RBV\Downloads\C#\TMFORUM\ODA\Tmf632.PartyManagement.Api\obj\Debug\net8.0\.NETCoreApp,Version=v8.0.AssemblyAttributes.cs
// <autogenerated />
using System;
using System.Reflection;
[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute(".NETCoreApp,Version=v8.0", FrameworkDisplayName = ".NET 8.0")]


E:\Usuários\RBV\Downloads\C#\TMFORUM\ODA\Tmf632.PartyManagement.Api\obj\Debug\net8.0\Tmf632.PartyManagement.Api.AssemblyInfo.cs
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: System.Reflection.AssemblyCompanyAttribute("Tmf632.PartyManagement.Api")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Debug")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0+cc9ef597ead5d6ea3d899ae7e82c99c69479b95f")]
[assembly: System.Reflection.AssemblyProductAttribute("Tmf632.PartyManagement.Api")]
[assembly: System.Reflection.AssemblyTitleAttribute("Tmf632.PartyManagement.Api")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]

// Generated by the MSBuild WriteCodeFragment class.



E:\Usuários\RBV\Downloads\C#\TMFORUM\ODA\Tmf632.PartyManagement.Api\obj\Debug\net8.0\Tmf632.PartyManagement.Api.GlobalUsings.g.cs
// <auto-generated/>
global using global::Microsoft.AspNetCore.Builder;
global using global::Microsoft.AspNetCore.Hosting;
global using global::Microsoft.AspNetCore.Http;
global using global::Microsoft.AspNetCore.Routing;
global using global::Microsoft.Extensions.Configuration;
global using global::Microsoft.Extensions.DependencyInjection;
global using global::Microsoft.Extensions.Hosting;
global using global::Microsoft.Extensions.Logging;
global using global::System;
global using global::System.Collections.Generic;
global using global::System.IO;
global using global::System.Linq;
global using global::System.Net.Http;
global using global::System.Net.Http.Json;
global using global::System.Threading;
global using global::System.Threading.Tasks;


E:\Usuários\RBV\Downloads\C#\TMFORUM\ODA\Tmf632.PartyManagement.Api\obj\Debug\net8.0\Tmf632.PartyManagement.Api.MvcApplicationPartsAssemblyInfo.cs
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPartAttribute("Swashbuckle.AspNetCore.SwaggerGen")]

// Generated by the MSBuild WriteCodeFragment class.



E:\Usuários\RBV\Downloads\C#\TMFORUM\ODA\Tmf683.PartyInteraction.Api\obj\Debug\net8.0\.NETCoreApp,Version=v8.0.AssemblyAttributes.cs
// <autogenerated />
using System;
using System.Reflection;
[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute(".NETCoreApp,Version=v8.0", FrameworkDisplayName = ".NET 8.0")]


E:\Usuários\RBV\Downloads\C#\TMFORUM\ODA\Tmf683.PartyInteraction.Api\obj\Debug\net8.0\Tmf683.PartyInteraction.Api.AssemblyInfo.cs
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: System.Reflection.AssemblyCompanyAttribute("Tmf683.PartyInteraction.Api")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Debug")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0+cc9ef597ead5d6ea3d899ae7e82c99c69479b95f")]
[assembly: System.Reflection.AssemblyProductAttribute("Tmf683.PartyInteraction.Api")]
[assembly: System.Reflection.AssemblyTitleAttribute("Tmf683.PartyInteraction.Api")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]

// Generated by the MSBuild WriteCodeFragment class.



E:\Usuários\RBV\Downloads\C#\TMFORUM\ODA\Tmf683.PartyInteraction.Api\obj\Debug\net8.0\TMF683.PartyInteraction.Api.GlobalUsings.g.cs
// <auto-generated/>
global using global::Microsoft.AspNetCore.Builder;
global using global::Microsoft.AspNetCore.Hosting;
global using global::Microsoft.AspNetCore.Http;
global using global::Microsoft.AspNetCore.Routing;
global using global::Microsoft.Extensions.Configuration;
global using global::Microsoft.Extensions.DependencyInjection;
global using global::Microsoft.Extensions.Hosting;
global using global::Microsoft.Extensions.Logging;
global using global::System;
global using global::System.Collections.Generic;
global using global::System.IO;
global using global::System.Linq;
global using global::System.Net.Http;
global using global::System.Net.Http.Json;
global using global::System.Threading;
global using global::System.Threading.Tasks;


E:\Usuários\RBV\Downloads\C#\TMFORUM\ODA\Tmf683.PartyInteraction.Api\obj\Debug\net8.0\Tmf683.PartyInteraction.Api.MvcApplicationPartsAssemblyInfo.cs
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPartAttribute("Swashbuckle.AspNetCore.SwaggerGen")]
[assembly: Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPartAttribute("Tmf683.PartyInteraction.Application")]
[assembly: Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPartAttribute("Tmf683.PartyInteraction.Infrastructure")]

// Generated by the MSBuild WriteCodeFragment class.



E:\Usuários\RBV\Downloads\C#\TMFORUM\ODA\Tmf683.PartyInteraction.Application\Models\Dtos\Requests\PartyInteractionCreateDto.cs
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization;
using Tmf683.PartyInteraction.Application.Models.Dtos;

namespace Tmf683.PartyInteraction.Application.Models.Dtos.Requests
{
    /// <summary>
    /// Data Transfer Object (DTO) para a criação de uma nova PartyInteraction.
    /// Este DTO define o contrato da API para a operação POST, garantindo que
    /// o cliente forneça apenas os dados necessários, em conformidade com a TMF683.
    /// </summary>
    public class PartyInteractionCreateDto
    {
        // --- Atributos de Metadados TMF ---
        [JsonPropertyName("@baseType")]
        public string? BaseType { get; set; }

        [JsonPropertyName("@type")]
        public string? Type { get; set; }

        [JsonPropertyName("@schemaLocation")]
        public string? SchemaLocation { get; set; }

        // --- Atributos de Negócio ---
        [JsonPropertyName("description")]
        public string? Description { get; set; }

        [JsonPropertyName("reason")]
        public string? Reason { get; set; }

        [JsonPropertyName("interactionDate")]
        public TimePeriodDto? InteractionDate { get; set; }

        // --- Listas de Relacionamentos ---

        // Uma interação deve ter pelo menos uma parte relacionada para ser válida.
        [Required]
        [JsonPropertyName("relatedParty")]
        public List<RelatedPartyOrPartyRoleDto> RelatedParty { get; set; } = new();

        [JsonPropertyName("interactionItem")]
        public List<InteractionItemDto>? InteractionItem { get; set; }

        [JsonPropertyName("note")]
        public List<NoteDto>? Note { get; set; }

        [JsonPropertyName("attachment")]
        public List<AttachmentRefOrValueDto>? Attachment { get; set; }

        [JsonPropertyName("relatedChannel")]
        public List<RelatedChannelDto>? RelatedChannel { get; set; }

        [JsonPropertyName("externalIdentifier")]
        public List<ExternalIdentifierDto>? ExternalIdentifier { get; set; }

        [JsonPropertyName("interactionRelationship")]
        public List<InteractionRelationshipDto>? InteractionRelationship { get; set; }
    }
}

E:\Usuários\RBV\Downloads\C#\TMFORUM\ODA\Tmf683.PartyInteraction.Application\Models\Dtos\Requests\PartyInteractionUpdateDto.cs
using System.Text.Json.Serialization;

namespace Tmf683.PartyInteraction.Application.Models.Dtos.Requests
{
    /// <summary>
    /// Data Transfer Object (DTO) para a atualização parcial (PATCH) de uma PartyInteraction.
    /// Todas as propriedades são anuláveis para que o cliente possa enviar apenas
    /// os campos que deseja modificar. A lógica de negócio no servidor será
    /// responsável por aplicar apenas as alterações fornecidas.
    /// </summary>
    public class PartyInteractionUpdateDto
    {
        // --- Atributos de Metadados TMF ---
        // O cliente pode, opcionalmente, querer atualizar os metadados.
        [JsonPropertyName("@baseType")]
        public string? BaseType { get; set; }

        [JsonPropertyName("@type")]
        public string? Type { get; set; }

        [JsonPropertyName("@schemaLocation")]
        public string? SchemaLocation { get; set; }

        // --- Atributos de Negócio ---
        [JsonPropertyName("description")]
        public string? Description { get; set; }

        [JsonPropertyName("reason")]
        public string? Reason { get; set; }

        // O status é um dos campos mais comuns a serem atualizados.
        [JsonPropertyName("status")]
        public string? Status { get; set; }

        [JsonPropertyName("interactionDate")]
        public TimePeriodDto? InteractionDate { get; set; }

        // --- Listas de Relacionamentos ---
        // As listas também são anuláveis. Se o cliente enviar a lista,
        // ela será substituída. Se não enviar (null), a lista existente será mantida.
        [JsonPropertyName("relatedParty")]
        public List<RelatedPartyOrPartyRoleDto>? RelatedParty { get; set; }

        [JsonPropertyName("interactionItem")]
        public List<InteractionItemDto>? InteractionItem { get; set; }

        [JsonPropertyName("note")]
        public List<NoteDto>? Note { get; set; }

        [JsonPropertyName("attachment")]
        public List<AttachmentRefOrValueDto>? Attachment { get; set; }

        [JsonPropertyName("relatedChannel")]
        public List<RelatedChannelDto>? RelatedChannel { get; set; }

        [JsonPropertyName("externalIdentifier")]
        public List<ExternalIdentifierDto>? ExternalIdentifier { get; set; }

        [JsonPropertyName("interactionRelationship")]
        public List<InteractionRelationshipDto>? InteractionRelationship { get; set; }
    }
}


E:\Usuários\RBV\Downloads\C#\TMFORUM\ODA\Tmf683.PartyInteraction.Application\Models\Dtos\Responses\PartyInteractionResponseDto.cs
namespace Tmf683.PartyInteraction.Application.Models.Dtos.Responses
{
    public class PartyInteractionResponseDto
    {
    }
}


E:\Usuários\RBV\Downloads\C#\TMFORUM\ODA\Tmf683.PartyInteraction.Application\obj\Debug\net8.0\.NETCoreApp,Version=v8.0.AssemblyAttributes.cs
// <autogenerated />
using System;
using System.Reflection;
[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute(".NETCoreApp,Version=v8.0", FrameworkDisplayName = ".NET 8.0")]


E:\Usuários\RBV\Downloads\C#\TMFORUM\ODA\Tmf683.PartyInteraction.Application\obj\Debug\net8.0\Tmf683.PartyInteraction.Application.AssemblyInfo.cs
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: System.Reflection.AssemblyCompanyAttribute("Tmf683.PartyInteraction.Application")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Debug")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0+cc9ef597ead5d6ea3d899ae7e82c99c69479b95f")]
[assembly: System.Reflection.AssemblyProductAttribute("Tmf683.PartyInteraction.Application")]
[assembly: System.Reflection.AssemblyTitleAttribute("Tmf683.PartyInteraction.Application")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]

// Generated by the MSBuild WriteCodeFragment class.



E:\Usuários\RBV\Downloads\C#\TMFORUM\ODA\Tmf683.PartyInteraction.Application\obj\Debug\net8.0\Tmf683.PartyInteraction.Application.GlobalUsings.g.cs
// <auto-generated/>
global using global::System;
global using global::System.Collections.Generic;
global using global::System.IO;
global using global::System.Linq;
global using global::System.Net.Http;
global using global::System.Threading;
global using global::System.Threading.Tasks;


E:\Usuários\RBV\Downloads\C#\TMFORUM\ODA\Tmf683.PartyInteraction.Domain\obj\Debug\net8.0\.NETCoreApp,Version=v8.0.AssemblyAttributes.cs
// <autogenerated />
using System;
using System.Reflection;
[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute(".NETCoreApp,Version=v8.0", FrameworkDisplayName = ".NET 8.0")]


E:\Usuários\RBV\Downloads\C#\TMFORUM\ODA\Tmf683.PartyInteraction.Domain\obj\Debug\net8.0\Tmf683.PartyInteraction.Domain.AssemblyInfo.cs
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: System.Reflection.AssemblyCompanyAttribute("Tmf683.PartyInteraction.Domain")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Debug")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0+cc9ef597ead5d6ea3d899ae7e82c99c69479b95f")]
[assembly: System.Reflection.AssemblyProductAttribute("Tmf683.PartyInteraction.Domain")]
[assembly: System.Reflection.AssemblyTitleAttribute("Tmf683.PartyInteraction.Domain")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]

// Generated by the MSBuild WriteCodeFragment class.



E:\Usuários\RBV\Downloads\C#\TMFORUM\ODA\Tmf683.PartyInteraction.Domain\obj\Debug\net8.0\Tmf683.PartyInteraction.Domain.GlobalUsings.g.cs
// <auto-generated/>
global using global::System;
global using global::System.Collections.Generic;
global using global::System.IO;
global using global::System.Linq;
global using global::System.Net.Http;
global using global::System.Threading;
global using global::System.Threading.Tasks;


E:\Usuários\RBV\Downloads\C#\TMFORUM\ODA\Tmf683.PartyInteraction.Infrastructure\obj\Debug\net8.0\.NETCoreApp,Version=v8.0.AssemblyAttributes.cs
// <autogenerated />
using System;
using System.Reflection;
[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute(".NETCoreApp,Version=v8.0", FrameworkDisplayName = ".NET 8.0")]


E:\Usuários\RBV\Downloads\C#\TMFORUM\ODA\Tmf683.PartyInteraction.Infrastructure\obj\Debug\net8.0\Tmf683.PartyInteraction.Infrastructure.AssemblyInfo.cs
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: System.Reflection.AssemblyCompanyAttribute("Tmf683.PartyInteraction.Infrastructure")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Debug")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0+cc9ef597ead5d6ea3d899ae7e82c99c69479b95f")]
[assembly: System.Reflection.AssemblyProductAttribute("Tmf683.PartyInteraction.Infrastructure")]
[assembly: System.Reflection.AssemblyTitleAttribute("Tmf683.PartyInteraction.Infrastructure")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]

// Generated by the MSBuild WriteCodeFragment class.



E:\Usuários\RBV\Downloads\C#\TMFORUM\ODA\Tmf683.PartyInteraction.Infrastructure\obj\Debug\net8.0\Tmf683.PartyInteraction.Infrastructure.GlobalUsings.g.cs
// <auto-generated/>
global using global::System;
global using global::System.Collections.Generic;
global using global::System.IO;
global using global::System.Linq;
global using global::System.Net.Http;
global using global::System.Threading;
global using global::System.Threading.Tasks;


